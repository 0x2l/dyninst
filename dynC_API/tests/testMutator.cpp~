//tester.C

#include <iostream>
#include <fstream>
#include <string>

#include "dynC.h"
#include "BPatch.h"
#include "BPatch_process.h"
#include "BPatch_snippet.h"
#include "BPatch_function.h"

#define STATEMENT_PATH "../testStatements"
const char *MUTATEE_PATH = "myMutatee";
const char *MUTATEE_ARGS[3];
const char *MODULE_NAME = "testMutatee.cpp";


BPatch bpatch;

int main(){

   using std::string;
   using std::ifstream;
   using std::cout;
   using std::endl;
   using std::getline;

//   string line;
//   string fileString;
   ifstream myfile(STATEMENT_PATH);
   
/*
   if(myfile.is_open()){
      while(!myfile.eof())
      {
         getline(myfile, line);
         fileString += line + "\n";
//         cout << line << endl;
      }
      myfile.close();
//      cout << fileString;
   }else{
      cout << "Unable to open file" << endl;
   }
*/   
///////////////////////////////////////////////////////

  cout << "Starting binary " << MUTATEE_PATH  << "... ";
  BPatch_addressSpace * appProc;
  bool rewrite = false;
  if(rewrite){
     appProc = bpatch.openBinary(MUTATEE_PATH, true);
  }else{
     appProc = bpatch.processCreate(MUTATEE_PATH, MUTATEE_ARGS);
  }
  cout << "complete" << endl;
  if (!appProc) return -1;

  BPatch_image *appImage = appProc->getImage();
  BPatch_module * mutatee = appImage->findModule(MODULE_NAME);


  if (mutatee == NULL){cout << "Bad Mutatee!" << endl;}

  const std::vector<BPatch_function *> * functions = mutatee->getProcedures();  

  

  BPatch_Vector<BPatch_point *> * entry_points = (*functions)[0]->findPoint(BPatch_entry);
  BPatch_Vector<BPatch_point *> * exit_points = (*functions)[0]->findPoint(BPatch_exit);;

  for(unsigned int n = 1; n < functions->size(); n++){
     entry_points->push_back((*(*functions)[n]->findPoint(BPatch_entry))[0]);
     exit_points->push_back((*(*functions)[n]->findPoint(BPatch_exit))[0]);
  }

  
/////////////////////////////////////////////////////////

   BPatch_snippet *retSnippet = dynC_API::createSnippet(myfile);
 
/////////////////////////////////////////////////////////
  
  appProc->insertSnippet(*retSnippet, *entry_points);
  //appProc->insertSnippet(*retSnippet, *exit_points);

  printf("Snippet's inserted!\n");
  if(!rewrite){
     BPatch_process *aProc = static_cast<BPatch_process *>(appProc);
     aProc->continueExecution();

  while (!aProc->isTerminated()){
     bpatch.waitForStatusChange();
  }

  if (aProc->terminationStatus() == ExitedNormally) {
     printf("Application exited with code %d\n", aProc->getExitCode());
  }
  else if (aProc->terminationStatus() == ExitedViaSignal) {
     printf("Application exited with signal %d\n", aProc->getExitSignal());
  }
  else {
     printf("Unknown application exit\n");
  }
  }else{
     BPatch_binaryEdit *aProc = static_cast<BPatch_binaryEdit *>(appProc);
     aProc->writeFile("myMutatee.out");
  }

   return 0;
}
