#
# make.module.tmpl for dyninst test suite
# Not intended to be a seperate makefile, but to be used in conjunction with
# higher level, platform-specific makefiles in the build directories

RM = rm -f
RMDIR ?= rmdir
M_GCC ?= purify $(GCC)
M_GXX ?= $(GXX)
DEPCC ?= $(GCC)
DEPENDFLAGS ?= -MM -MT
DEPENDDIR = ./depends
VPATH 	= ../src $(DEPENDDIR)

DYNINST_INCDIR = -I../../dyninstAPI/h
SYMTAB_INCDIR = -I../../symtabAPI/h
DYNUTIL_INCDIR = -I../../dynutil/h

IFLAGS += $(DYNINST_INCDIR)
IFLAGS += $(DYNUTIL_INCDIR)
IFLAGS += $(SYMTAB_INCDIR)
CXXFLAGS += $(DYNINST_INCDIR)
CXXFLAGS += $(DYNUTIL_INCDIR)
CXXFLAGS += $(SYMTAB_INCDIR)

#######################################################################
###  Generate compiler id strings
###
###  COMPILERT_NATIVE_CC, COMPILERT_NATIVE_CXX must be defined prior to
###  inclusion of this file.  gcc/g++ are handled here as platform-indep
###
#######################################################################

EMPTY:=
BLANK:=$(EMPTY) $(EMPTY)
LPAREN:=(
RPAREN:=)
COMMA=,

COMPILERT_GCC = $(shell $(M_GCC) -v 2>&1 | grep version | head -1)
COMPILER1_GCC = $(subst $(BLANK),_,$(COMPILERT_GCC))
COMPILER2_GCC = $(subst $(LPAREN),_,$(COMPILER1_GCC))
COMPILER_GCC = $(subst $(RPAREN),_,$(COMPILER2_GCC))
MUTATEE_CFLAGS_GNU += -DCOMPILER='"$(COMPILER_GCC)"'

COMPILERT_GXX = $(shell $(M_GCC) -v 2>&1 | grep version | head -1)
COMPILER1_GXX = $(subst $(BLANK),_,$(COMPILERT_GXX))
COMPILER2_GXX = $(subst $(LPAREN),_,$(COMPILER1_GXX))
COMPILER_GXX = $(subst $(RPAREN),_,$(COMPILER2_GXX))
MUTATEE_CXXFLAGS_GNU += -DCOMPILER='"$(COMPILER_GXX)"'

COMPILER1_NATIVE_CC = $(subst $(BLANK),_,$(COMPILERT_NATIVE_CC))
COMPILER2_NATIVE_CC = $(subst $(LPAREN),_,$(COMPILER1_NATIVE_CC))
COMPILER_NATIVE_CC = $(subst $(RPAREN),_,$(COMPILER2_NATIVE_CC))
MUTATEE_CFLAGS_NATIVE += -DCOMPILER='"$(COMPILER_NATIVE_CC)"'

COMPILER1_NATIVE_CXX = $(subst $(BLANK),_,$(COMPILERT_NATIVE_CXX))
COMPILER2_NATIVE_CXX = $(subst $(LPAREN),_,$(COMPILER1_NATIVE_CXX))
COMPILER_NATIVE_CXX = $(subst $(RPAREN),_,$(COMPILER2_NATIVE_CXX))
MUTATEE_CXXFLAGS_NATIVE += -DCOMPILER='"$(COMPILER_NATIVE_CXX)"'

TEST_DEST = $(TO_CORE)/$(PROGRAM_DEST)/testprogs_new2
LIB_DEST = $(TO_CORE)/$(LIBRARY_DEST)

#######################################################################
###  Basic definitions (filename prefixes)
#######################################################################

FORALL_MUTATORS =  

FORALL_MUTATEES = mutatee_util

SRCS_LIBTESTSUITE = test_lib.C \
                    test_lib_soExecution.C \
                    ParameterDict.C \
                    TestData.C \
                    TestMutator.C \
                    TestOutputDriver.C \
                    StdOutputDriver.C \
                    ResumeLog.C \
                    test_info_new.C

SRCS_DYNINSTCOMP_LIB = dyninst/dyninst_comp.C \
                       dyninst/test_lib_mutateeStart.C \
                       dyninst/Callbacks.C \
                       dyninst/Process_data.C \
                       dyninst/test_lib_test7.C \
                       dyninst/test_lib_test9.C
OBJS_DYNINSTCOMP_LIB = $(notdir $(SRCS_DYNINSTCOMP_LIB:%.C=%.o))

SRCS_DYNINSTTESTLIB = dyninst/libtestA.c \
                      dyninst/libtestB.c \
                      dyninst/libInstMe.c \
                      dyninst/libLoadMe.c \
                      dyninst/libTest12.c
dyninst_MUTATOR_FLAGS = -L. -ltestdyninst
ifdef M_ABI
DYNINST_TESTLIBS = $($(addsuffix _$(M_ABI), $(notdir $(SRCS_DYNINSTTESTLIB)):%.c=%.so))
DYNINST_TESTLIBS_ABI = $(addsuffix _$(M_ABI).so, $(notdir $(SRCS_DYNINSTTESTLIB))))
else
DYNINST_TESTLIBS = $(notdir $(SRCS_DYNINSTTESTLIB:%.c=%.so))
endif


SRCS_TEMPLATES = test_driver_templates.C 

OBJS_LIBTESTSUITE = $(SRCS_LIBTESTSUITE:%.C=%.o)
OBJS_TEMPLATES = $(SRCS_TEMPLATES:%.C=%.o)

ifdef USE_LIBTESTSUITE_EXT_A
LIBTESTSUITE = libtestSuite.a
LIBDYNINSTCOMP = libtestdyninst.a
else
LIBTESTSUITE = libtestSuite.so
LIBDYNINSTCOMP = libtestdyninst.so
endif

######################################################################
### Main target
######################################################################

all: testlibs mutators mutatees drivers output_drivers components

# test_info_new.gen.o is special-cased because it makes use of the
# COMPILER_CONTROL_DEFS to determine which mutatees to enable for compilers
# that are not present at all sites.
test_info_new.gen.o: test_info_new.gen.C
	$(CXX) -c -o $@ $(CXXFLAGS) $(COMPILER_CONTROL_DEFS) -I../src/ test_info_new.gen.C

#######################################################################
###  A list of all the targets we're building, for install purposes
#######################################################################

ALL_TARGETS_DEST		= $(addprefix $(TEST_DEST)/,$(ALL_TARGETS))
LIBTESTSUITE_DEST               = $(addprefix $(TEST_DEST)/,$(LIBTESTSUITE))

#######################################################################
###  Some pattern rules
#######################################################################

CXXTFLAGS := $(filter-out -fno-implicit-templates, $(CXXFLAGS))

#######################################################################
###  High level targets
#######################################################################

MUTATOR_LDFLAGS := -L. -ltestSuite $(LIBDIR) $(MUTATOR_LIBS) $(MUTATOR_LDFLAGS) -lpthread
MUTATOR_SO_LDFLAGS = $(filter-out -liberty, $(MUTATOR_LDFLAGS))


# all: testlibs mutators mutatees drivers
# See also an addition to the 'all' rule at the end of the file

### Automatically generated variables; generated by makemake.py
#LIBS = -ltestdyninst

include make.mutators.gen

include make.solo_mutatee.gen

mutatees:

mutators:

components:

testlibs:

ifneq ($(wildcard ../src/dyninst), )
mutatees: $(dyninst_SOLO_MUTATEES)
mutators: $(dyninst_MUTATORS_SO)
components: $(LIBDYNINSTCOMP)
testlibs: $(dyninst_TESTLIBS) $(dyninst_TESTLIBS_ABI)
endif

TESTLIBS = $(addsuffix .so, $(notdir $(TESTLIB_STEMS)))
ifdef M_ABI
TESTLIBS_ABI = $(addsuffix _$(M_ABI).so, $(notdir (TESTLIB_STEMS)))
endif



echo:
	@echo "DEPS TESTLIBS = $(DEPS_TESTLIBS)"; \
	echo "MUTATEES_NATIVE_CXX = $(MUTATEES_NATIVE_CXX)"; \
	echo "MUTATEES_NATIVE_CC = $(MUTATEES_NATIVE_CC)"; \
        echo "MUTATORS = $(MUTATORS)" ; \
	echo "MUTATEES_GCC_ABI = $(MUTATEES_GCC_ABI)"

install: all

symlink: all

clean: clean_solo_mutatees
	$(RM) *.da *.bb. *.bbg 
	$(RM) $(TESTLIBS) $(TESTLIBS_ABI) $(LIBTESTSUITE) test_driver runTests libTest12.so
	$(RM) $(MUTATORS_SO)
	$(RM) $(OUTPUT_DRIVERS)
	$(RM) $(LIBDYNINSTCOMP)
	$(RM) *.o
	$(RM) test11
	$(RM) imagefile
	$(RM) core core.*
	$(RM) -r _dyninstsaved*
	$(RM) *.ii *.ti
	$(RM) .__afs*
 

distclean: clean
	@if [ -d $(DEPENDDIR) ]; then \
	  $(RM) $(DEPENDDIR)/*.dep; \
          rmdir $(DEPENDDIR); \
         fi

specclean:
	$(RM) *.gen *.pl tuples test_info_new.gen.C

ifdef M_ABI
$(CALL35_1_OBJ_ABI): $(CALL35_1_SRC_ABI)
	$(M_GCC) $(M_ABI_FLAG) -c $< $(CFLAGS) $(MUTATEE_CFLAGS_GNU) -o $@ 
endif

testlibs: $(LIBTESTSUITE)

drivers: test_driver runTests

.PHONY: clean install distclean mutators mutatees testlibs gnu_mutatees native_mutatees echo all

#######################################################################
###  Build command for test libraries
#######################################################################

$(dyninst_OBJS_ALL_MUTATORS): %.o : dyninst/%.C $(DEPENDDIR)/%.dep
	$(CXX) -c -o $@ -fPIC $(CXXFLAGS) -I../src/ -I../src/dyninst ../src/dyninst/$*.C

$(DYNINST_TESTLIBS): %.so : dyninst/%.c $(DEPENDDIR)/%.dep
ifdef MAKE_SHARED_LIB
	$(CC) -g -c $(CFLAGS) -I$(TO_CORE)/dyninstAPI_RT/h $(CFLAGS_TESTLIBS) $(filter %.c, $^) -o $*.o
	$(MAKE_SHARED_LIB) $(TESTLIB_FLAGS) $*.o -o $@
else
	$(CC) $(TESTLIB_FLAGS) -I$(TO_CORE)/dyninstAPI_RT/h -I../src/ $(filter %.c,$^) -o $@
endif

ifdef M_ABI
$(DYNINST_TESTLIBS_ABI): %_$(M_ABI).so : dyninst/%.c $(DEPENDDIR)/%.dep
ifdef MAKE_SHARED_LIB
	$(CC) -g -c $(CFLAGS) $(CFLAGS_TESTLIBS) $(filter %.c, $^) -o $*.o
	$(MAKE_SHARED_LIB) $(TESTLIB_FLAGS) $*.o -o $@
else
	$(CC) $(M_ABI_FLAG) $(TESTLIB_FLAGS) -I$(TO_CORE)/dyninstAPI_RT/h -I../src/ $(filter %.c,$^) -o $@
endif
endif

$(OBJS_TEMPLATES): %.o : ../src/%.C
	$(M_GXX) -c -o $@ $(CXXTFLAGS) -I../src/ ../src/$*.C

test_lib_templates.o : ../src/test_lib_templates.C
	$(M_GXX) -c -o $@ -fPIC $(CXXTFLAGS) -I../src/ ../src/$*.C

$(OBJS_DYNINSTCOMP_LIB): %.o : ../src/dyninst/%.C $(DEPENDDIR)/%.dep
	$(M_GXX) -c -o $@ -fPIC $(CXXFLAGS) -I../src/ ../src/dyninst/$*.C

$(OBJS_LIBTESTSUITE): %.o : ../src/%.C $(DEPENDDIR)/%.dep
	$(M_GXX) -c -o $@ -fPIC $(CXXFLAGS) -I../src/ ../src/$*.C

$(LIBDYNINSTCOMP) : $(OBJS_DYNINSTCOMP_LIB)   
	echo $(OBJS_DYNINSTCOMP_LIB)
	echo $(SRCS_DYNINSTCOMP_LIB)
	$(CXX) -shared $(TESTSUITE_FLAGS) $(LIBDIR) $(OBJS_DYNINSTCOMP_LIB) -o $@ -ldyninstAPI -lsymtabAPI -lcommon

$(LIBTESTSUITE) : $(OBJS_LIBTESTSUITE) test_lib_templates.o test_lib.h
	$(CXX) -shared $(TESTSUITE_FLAGS) $(LIBDIR) $(LIBS_LIBTESTSUITE) $(OBJS_LIBTESTSUITE) test_lib_templates.o -o $@

#
# Native Fortran mutatees
# 
# There is no real advantage to generality here since there is only one fortran mutatee
# (ie for test1), thus all constituent files are built explicitly

ifdef NATIVE_FC 
test1.mutatee_$(NATIVE_FC).o: ../src/test1.mutateeFort.F
	$(NATIVE_FC) -g  $(MUTATEE_NATIVE_FFLAGS) -c -o $@ $^ 
test1.mutateeFortC_$(NATIVE_FC).o: ../src/test1.mutateeFortC.c
	$(NATIVE_FORTRAN_CC) $(MUTATEE_NATIVE_FC_CFLAGS) -c $(filter %.c,$^) -o $@

$(MUTATEES_NATIVE_FC): test%.mutatee_$(NATIVE_FC) : test%.mutatee_$(NATIVE_FC).o test1.mutateeFortC_$(NATIVE_FC).o test1.mutateeCommon_$(NATIVE_FORTRAN_CC).o mutatee_util_$(NATIVE_FORTRAN_CC).o $(DEPENDDIR)/test%.mutatee_$(NATIVE_FC).dep
	$(NATIVE_FC) -o $@ $(filter %.o,$^) $(MUTATEE_NATIVE_FC_LDFLAGS) $(MUTATEE_LIBS) 
endif

# Native OpenMP mutatees
# There is no real advantage to generality here since there is only one OpenMP mutatee
# (ie for test16), thus all constituent files are built explicitly
ifdef NATIVE_CXX_OMP 
test16.mutatee_$(NATIVE_CXX_OMP).o: ../src/test16.mutatee.c
	$(NATIVE_CXX_OMP) -g  $(MUTATEE_NATIVE_CXX_CFLAGS) -o $@ $^ 

$(MUTATEES_NATIVE_CXX_OMP): test%.mutatee_$(NATIVE_CXX_OMP) : test%.mutatee_$(NATIVE_CXX_OMP).o $(DEPENDDIR)/test%.mutatee_$(NATIVE_CXX_OMP).dep
	$(NATIVE_CXX_OMP) $(MUTATEE_NATIVE_CXX_OMP_LDFLAGS) -o $@ $(filter %.o,$^) $(MUTATEE_LIBS) 

#$(MUTATEES_NATIVE_CXX_OMP): ../src/test16.mutatee.c
#	$(NATIVE_CXX_OMP) -g  $(MUTATEE_NATIVE_CXX_CFLAGS) -o $@ $^ 

endif


# Install directory
$(TEST_DEST): 
	mkdir $(TEST_DEST)

#######################################################################
###  Generic Mutator build rule:
###
###  resorts to pattern matching test% (matches test1, test2, ... etc)
###  to generate correct, minimal set of prerequisites for each test.
###  It would be nicer to just match something simpler that wasn't 
###  name-dependant, but gnu make is not making this easy.
###
#######################################################################

MUTATEE_DEFS := -Dgnu_cc=_gcc -Dgnu_cxx=_g++

ifdef M_ABI
MUTATEE_DEFS += -Dgnu_abi_cc=_gcc_$(M_ABI) -Dgnu_abi_cxx=_g++_$(M_ABI) -Dm_abi
endif

ifdef M_G77
MUTATEE_DEFS += -Dgnu_fc=_g77
endif

ifdef NATIVE_CC
MUTATEE_DEFS += -Dnative_cc=_$(NATIVE_CC)
endif

ifdef NATIVE_CXX
MUTATEE_DEFS += -Dnative_cxx=_$(NATIVE_CXX)
endif

ifdef NATIVE_FC
MUTATEE_DEFS += -Dnative_fc=_$(NATIVE_FC)
endif

runTests.o: ../src/runTests.C $(DEPENDDIR)/runTests.dep
	$(CXX) -c -o $@ $(CXXFLAGS) $(MUTATEE_DEFS) ../src/runTests.C
runTests_static.o: ../src/runTests.C $(DEPENDDIR)/runTests.dep
	$(CXX) -c -o $@ $(CXXFLAGS) $(MUTATEE_DEFS) -DSTATIC_TEST_DRIVER ../src/runTests.C

runTests-utils.o: ../src/runTests-utils.C $(DEPENDDIR)/runTests-utils.dep
	$(CXX) -c -o $@ $(CXXFLAGS) $(MUTATEE_DEFS) ../src/runTests-utils.C

runTests: runTests.o runTests-utils.o test_driver_templates.o 
	$(CXX) $(CXXFLAGS) -o $@ runTests.o runTests-utils.o test_driver_templates.o 
runTests_static: runTests_static.o runTests-utils.o test_driver_templates.o 
	$(CXX) $(CXXFLAGS) -o runTests runTests_static.o runTests-utils.o test_driver_templates.o 

test_driver.o: ../src/test_driver.C $(DEPENDDIR)/test_driver.dep
	$(CXX) -c -o $@ $(CXXFLAGS) $(MUTATEE_DEFS) ../src/test_driver.C

test_driver_static.o: ../src/test_driver.C $(DEPENDDIR)/test_driver_static.dep
	$(CXX) -c -o $@ -DSTATIC_TEST_DRIVER $(CXXFLAGS) $(MUTATEE_DEFS) ../src/test_driver.C

test_driver: test_driver.o test_driver_templates.o test_info_new.gen.o $(DEPENDDIR)/test_driver.dep $(LIBTESTSUITE)
	$(CXX) -o $@ test_driver.o test_driver_templates.o test_info_new.gen.o $(MUTATOR_LDFLAGS) $(LIBS)

######################################################################
### Output Drivers
######################################################################

OUTPUT_DRIVERS = DatabaseOutputDriver.so

DatabaseOutputDriver.o : ../src/DatabaseOutputDriver.C # $(DEPENDDIR)/DatabaseOutputDriver.dep
	$(M_GXX) -c -o $@ -fPIC $(CXXFLAGS) -I../src/ ../src/$*.C

DatabaseOutputDriver.so: DatabaseOutputDriver.o # $(DEPENDDIR)/DatabaseOutputDriver.dep
	$(CXX) -o $@ -shared $(filter %.o,$^) $(MUTATOR_SO_LDFLAGS) $(LIBDIR) $(LIBS) $(LDFLAGS)
ifndef NO_OPT_FLAG
ifdef STRIP_SO
	$(STRIP_SO) $@
endif
endif

.PHONY: output_drivers
output_drivers: $(OUTPUT_DRIVERS)

#######################################################################
###  Depends
#######################################################################

DEPS_MUTATORS 		+= $(addprefix $(DEPENDDIR)/,$(addsuffix .dep,$(MUTATORS)))
DEPS_MUTATORS		+= $(addprefix $(DEPENDDIR)/,$(addsuffix .dep,$(FORALL_MUTATORS)))
DEPS_MUTATORS           += $(DEPENDDIR)/test_driver.dep
DEPS_MUTATORS           += $(DEPENDDIR)/runTests.dep $(DEPENDDIR)/runTests-utils.dep

DEPS_MUTATEES_GCC	+= $(addprefix $(DEPENDDIR)/,$(addsuffix _gcc.dep, $(MUTATEES_C)))
DEPS_MUTATEES_GXX	+= $(addprefix $(DEPENDDIR)/,$(addsuffix _g++.dep, $(MUTATEES_CXX)))
DEPS_MUTATEES_GXX	+= $(addprefix $(DEPENDDIR)/,$(addsuffix _g++.dep, $(MUTATEES_CXX_ONLY)))
DEPS_TESTLIBS	 	+= $(addprefix $(DEPENDDIR)/,$(addsuffix .dep,$(notdir $(TESTLIB_STEMS))))
DEPS_TESTLIBS		+= $(DEPENDDIR)/libTest12.dep
DEPS_LIBTESTSUITE        = $(addprefix $(DEPENDDIR)/,$(SRCS_LIBTESTSUITE:%.C=%.dep))
DEPS_DYNINSTCOMP        = $(addprefix $(DEPENDDIR)/,$(SRCS_DYNINSTCOMP_LIB:%.C=%.dep))

ifdef M_G77
DEPS_MUTATEES_G77	+= $(addprefix $(DEPENDDIR)/,$(addsuffix _g77.dep, $(MUTATEES_FORTRAN)))
endif

ifdef NATIVE_FC
DEPS_MUTATEES_NATIVE_FC	+= $(addprefix $(DEPENDDIR)/,$(addsuffix _$(NATIVE_FC).dep, $(MUTATEES_FORTRAN)))
endif

ifdef NATIVE_CXX_OMP
DEPS_MUTATEES_NATIVE_CXX_OMP += $(addprefix $(DEPENDDIR)/,$(addsuffix _$(NATIVE_CXX_OMP).dep, $(MUTATEES_OPENMP)))
endif

ifdef NATIVE_CC
DEPS_MUTATEES_NATIVE_CC	+= $(addprefix $(DEPENDDIR)/,$(addsuffix _$(NATIVE_CC).dep, $(MUTATEES_C)))
endif

ifdef NATIVE_CXX
DEPS_MUTATEES_NATIVE_CXX += $(addprefix $(DEPENDDIR)/,$(addsuffix _$(NATIVE_CXX).dep, $(MUTATEES_CXX)))
DEPS_MUTATEES_NATIVE_CXX += $(addprefix $(DEPENDDIR)/,$(addsuffix _$(NATIVE_CXX).dep, $(MUTATEES_CXX_ONLY)))
endif


depend: $(DEPS_MUTATORS)

depend_dir:
	@echo "mut deps: $(DEPS_MUTATORS)"
	@if [ -d $(DEPENDDIR) ]; then \
          echo "Directory \"$(DEPENDDIR)\" already exists..."; \
         else \
          mkdir -p $(DEPENDIR); \
          echo "Made \"$(DEPENDDIR)\" directory..."; \
         fi

$(DEPENDDIR)/test_driver_static.dep: test_driver.C
	@mkdir -p $(DEPENDDIR)
	$(DEPCC) $(CXXFLAGS) $< $(MUTATOR_CXXFLAGS) -DSTATIC_TEST_DRIVER $(DEPENDFLAGS) $*.o > $@

$(DEPS_MUTATORS): $(DEPENDDIR)/%.dep : %.C
	@mkdir -p $(DEPENDDIR)
	$(DEPCC) $(CXXFLAGS) $< $(MUTATOR_CXXFLAGS) $(DEPENDFLAGS) $*.o > $@

$(DEPS_MUTATEES_GCC): $(DEPENDDIR)/test%.mutatee_gcc.dep : test%.mutatee.c $(SRCS_FORALL_MUTATEES)
	@mkdir -p $(DEPENDDIR)
	$(M_GCC) $(CFLAGS) $< $(MUTATEE_CFLAGS) $(DEPENDFLAGS) test$*.mutatee_gcc.o > $@

$(DEPS_MUTATEES_GXX): $(DEPENDDIR)/test%.mutatee_g++.dep : $(wildcard test%.mutatee.*) $(SRCS_FORALL_MUTATEES)
	@mkdir -p $(DEPENDDIR)
	$(M_GXX) $(CXXFLAGS) $< $(MUTATEE_CXXFLAGS) $(DEPENDFLAGS) test$*.mutatee_gxx.o > $@

$(DEPS_MUTATEES_G77): $(DEPENDDIR)/test%.mutatee_g77.dep : test%.mutateeFort.F $(SRCS_FORALL_MUTATEES)
	@mkdir -p $(DEPENDDIR)
	$(M_G77) $(CFLAGS) $< $(MUTATEE_CFLAGS) $(DEPENDFLAGS) test$*.mutateeFort_g77.o > $@


# Use gcc to generate deps for native compilers

ifdef NATIVE_CC
$(DEPS_MUTATEES_NATIVE_CC): $(DEPENDDIR)/test%.mutatee_$(NATIVE_CC).dep : test%.mutatee.c $(SRCS_FORALL_MUTATEES)
	@mkdir -p $(DEPENDDIR)
	$(M_GCC) $(CFLAGS) $< $(MUTATEE_CFLAGS) $(DEPENDFLAGS) test$*.mutatee_$(NATIVE_CC).o > $@
endif

ifdef NATIVE_CXX
$(DEPS_MUTATEES_NATIVE_CXX): $(DEPENDDIR)/test%.mutatee_$(NATIVE_CXX).dep : $(wildcard test%.mutatee.*) $(SRCS_FORALL_MUTATEES)
	@mkdir -p $(DEPENDDIR)
	$(M_GXX) $(CXXFLAGS) $< $(MUTATEE_CXXFLAGS) $(DEPENDFLAGS) test$*.mutatee_$(NATIVE_CXX).o > $@
endif

ifdef NATIVE_FC
$(DEPS_MUTATEES_NATIVE_FC): $(DEPENDDIR)/test%.mutatee_$(NATIVE_FC).dep : test%.mutateeFort.F $(SRCS_FORALL_MUTATEES)
	@mkdir -p $(DEPENDDIR)
	$(M_G77) $(CFLAGS) $< $(MUTATEE_CFLAGS) $(DEPENDFLAGS) test$*.mutateeFort_$(NATIVE_FC).o > $@
endif

ifdef NATIVE_CXX_OMP
$(DEPS_MUTATEES_NATIVE_CXX_OMP): $(DEPENDDIR)/test%.mutatee_$(NATIVE_CXX_OMP).dep : test%.mutatee.c $(SRCS_FORALL_MUTATEES)
	@mkdir -p $(DEPENDDIR)
	$(M_GXX) $(CFLAGS) $< $(MUTATEE_CFLAGS) $(DEPENDFLAGS) test$*.mutatee_$(NATIVE_CXX_OMP).o > $@
endif


$(DEPS_TESTLIBS): $(DEPENDDIR)/lib%.dep : lib%.c 
	@mkdir -p $(DEPENDDIR)
	$(DEPCC) $(CXXFLAGS) -I$(TO_CORE)/dyninstAPI_RT/h $< $(MUTATOR_CXXFLAGS) $(DEPENDFLAGS) lib$*.so > $@

$(DEPS_DYNINSTCOMP) $(DEPS_LIBTESTSUITE): $(DEPENDDIR)/%.dep : %.C
	@mkdir -p $(DEPENDDIR)
	$(DEPCC) $(CXXFLAGS) -I$(TO_CORE)/dyninstAPI_RT/h $< $(MUTATOR_CXXFLAGS) $(DEPENDFLAGS) $*.o > $@


# do not include dep files for "clean" targets
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
ifneq ($(MAKECMDGOALS),echo)

-include $(DEPS_MUTATORS)
# -include $(DEPS_MUTATEES_GCC)
# -include $(DEPS_MUTATEES_GXX)
# -include $(DEPS_TESTLIBS)

ifdef M_G77
# -include $(DEPS_MUTATEES_G77)
endif

ifdef NATIVE_CC
# -include $(DEPS_MUTATEES_NATIVE_CC)
endif

ifdef NATIVE_CXX
-include $(DEPS_MUTATEES_NATIVE_CXX)
endif

ifdef NATIVE_FC
-include $(DEPS_MUTATEES_NATIVE_FC)
endif

ifdef NATIVE_CXX_OMP
-include $(DEPS_MUTATEES_NATIVE_CXX_OMP)
endif

endif
endif
endif
