enum {
  aarch64_op_INVALID,
  aarch64_op_extended,
  aarch64_op_adc,
  aarch64_op_adcs,
  aarch64_op_add_addsub_ext,
  aarch64_op_add_addsub_imm,
  aarch64_op_add_addsub_shift,
  aarch64_op_adds_addsub_ext,
  aarch64_op_adds_addsub_imm,
  aarch64_op_adds_addsub_shift,
  aarch64_op_adr,
  aarch64_op_adrp,
  aarch64_op_and_log_imm,
  aarch64_op_and_log_shift,
  aarch64_op_ands_log_imm,
  aarch64_op_ands_log_shift,
  aarch64_op_asr_asrv,
  aarch64_op_asr_sbfm,
  aarch64_op_asrv,
  aarch64_op_at_sys,
  aarch64_op_b_cond,
  aarch64_op_b_uncond,
  aarch64_op_bfi_bfm,
  aarch64_op_bfm,
  aarch64_op_bfxil_bfm,
  aarch64_op_bic_log_shift,
  aarch64_op_bics,
  aarch64_op_bl,
  aarch64_op_blr,
  aarch64_op_br,
  aarch64_op_brk,
  aarch64_op_cbnz,
  aarch64_op_cbz,
  aarch64_op_ccmn_imm,
  aarch64_op_ccmn_reg,
  aarch64_op_ccmp_imm,
  aarch64_op_ccmp_reg,
  aarch64_op_cinc_csinc,
  aarch64_op_cinv_csinv,
  aarch64_op_clrex,
  aarch64_op_cls_int,
  aarch64_op_clz_int,
  aarch64_op_cmn_adds_addsub_ext,
  aarch64_op_cmn_adds_addsub_imm,
  aarch64_op_cmn_adds_addsub_shift,
  aarch64_op_cmp_subs_addsub_ext,
  aarch64_op_cmp_subs_addsub_imm,
  aarch64_op_cmp_subs_addsub_shift,
  aarch64_op_cneg_csneg,
  aarch64_op_crc32,
  aarch64_op_crc32c,
  aarch64_op_csel,
  aarch64_op_cset_csinc,
  aarch64_op_csetm_csinv,
  aarch64_op_csinc,
  aarch64_op_csinv,
  aarch64_op_csneg,
  aarch64_op_dc_sys,
  aarch64_op_dcps1,
  aarch64_op_dcps2,
  aarch64_op_dcps3,
  aarch64_op_dmb,
  aarch64_op_drps,
  aarch64_op_dsb,
  aarch64_op_eon,
  aarch64_op_eor_log_imm,
  aarch64_op_eor_log_shift,
  aarch64_op_eret,
  aarch64_op_extr,
  aarch64_op_hint,
  aarch64_op_hlt,
  aarch64_op_hvc,
  aarch64_op_ic_sys,
  aarch64_op_isb,
  aarch64_op_ldar,
  aarch64_op_ldarb,
  aarch64_op_ldarh,
  aarch64_op_ldaxp,
  aarch64_op_ldaxr,
  aarch64_op_ldaxrb,
  aarch64_op_ldaxrh,
  aarch64_op_ldnp_gen,
  aarch64_op_ldp_gen,
  aarch64_op_ldpsw,
  aarch64_op_ldr_imm_gen,
  aarch64_op_ldr_lit_gen,
  aarch64_op_ldr_reg_gen,
  aarch64_op_ldrb_imm,
  aarch64_op_ldrb_reg,
  aarch64_op_ldrh_imm,
  aarch64_op_ldrh_reg,
  aarch64_op_ldrsb_imm,
  aarch64_op_ldrsb_reg,
  aarch64_op_ldrsh_imm,
  aarch64_op_ldrsh_reg,
  aarch64_op_ldrsw_imm,
  aarch64_op_ldrsw_lit,
  aarch64_op_ldrsw_reg,
  aarch64_op_ldtr,
  aarch64_op_ldtrb,
  aarch64_op_ldtrh,
  aarch64_op_ldtrsb,
  aarch64_op_ldtrsh,
  aarch64_op_ldtrsw,
  aarch64_op_ldur_gen,
  aarch64_op_ldurb,
  aarch64_op_ldurh,
  aarch64_op_ldursb,
  aarch64_op_ldursh,
  aarch64_op_ldursw,
  aarch64_op_ldxp,
  aarch64_op_ldxr,
  aarch64_op_ldxrb,
  aarch64_op_ldxrh,
  aarch64_op_lsl_lslv,
  aarch64_op_lsl_ubfm,
  aarch64_op_lslv,
  aarch64_op_lsr_lsrv,
  aarch64_op_lsr_ubfm,
  aarch64_op_lsrv,
  aarch64_op_madd,
  aarch64_op_mneg_msub,
  aarch64_op_mov_add_addsub_imm,
  aarch64_op_mov_movn,
  aarch64_op_mov_movz,
  aarch64_op_mov_orr_log_imm,
  aarch64_op_mov_orr_log_shift,
  aarch64_op_movk,
  aarch64_op_movn,
  aarch64_op_movz,
  aarch64_op_mrs,
  aarch64_op_msr_imm,
  aarch64_op_msr_reg,
  aarch64_op_msub,
  aarch64_op_mul_madd,
  aarch64_op_mvn_orn_log_shift,
  aarch64_op_neg_sub_addsub_shift,
  aarch64_op_negs_subs_addsub_shift,
  aarch64_op_ngc_sbc,
  aarch64_op_ngcs_sbcs,
  aarch64_op_nop_hint,
  aarch64_op_orn_log_shift,
  aarch64_op_orr_log_imm,
  aarch64_op_orr_log_shift,
  aarch64_op_prfm_imm,
  aarch64_op_prfm_lit,
  aarch64_op_prfm_reg,
  aarch64_op_prfum,
  aarch64_op_rbit_int,
  aarch64_op_ret,
  aarch64_op_rev,
  aarch64_op_rev16_int,
  aarch64_op_rev32_int,
  aarch64_op_ror_extr,
  aarch64_op_ror_rorv,
  aarch64_op_rorv,
  aarch64_op_sbc,
  aarch64_op_sbcs,
  aarch64_op_sbfiz_sbfm,
  aarch64_op_sbfm,
  aarch64_op_sbfx_sbfm,
  aarch64_op_sdiv,
  aarch64_op_sev_hint,
  aarch64_op_sevl_hint,
  aarch64_op_smaddl,
  aarch64_op_smc,
  aarch64_op_smnegl_smsubl,
  aarch64_op_smsubl,
  aarch64_op_smulh,
  aarch64_op_smull_smaddl,
  aarch64_op_stlr,
  aarch64_op_stlrb,
  aarch64_op_stlrh,
  aarch64_op_stlxp,
  aarch64_op_stlxr,
  aarch64_op_stlxrb,
  aarch64_op_stlxrh,
  aarch64_op_stnp_gen,
  aarch64_op_stp_gen,
  aarch64_op_str_imm_gen,
  aarch64_op_str_reg_gen,
  aarch64_op_strb_imm,
  aarch64_op_strb_reg,
  aarch64_op_strh_imm,
  aarch64_op_strh_reg,
  aarch64_op_sttr,
  aarch64_op_sttrb,
  aarch64_op_sttrh,
  aarch64_op_stur_gen,
  aarch64_op_sturb,
  aarch64_op_sturh,
  aarch64_op_stxp,
  aarch64_op_stxr,
  aarch64_op_stxrb,
  aarch64_op_stxrh,
  aarch64_op_sub_addsub_ext,
  aarch64_op_sub_addsub_imm,
  aarch64_op_sub_addsub_shift,
  aarch64_op_subs_addsub_ext,
  aarch64_op_subs_addsub_imm,
  aarch64_op_subs_addsub_shift,
  aarch64_op_svc,
  aarch64_op_sxtb_sbfm,
  aarch64_op_sxth_sbfm,
  aarch64_op_sxtw_sbfm,
  aarch64_op_sys,
  aarch64_op_sysl,
  aarch64_op_tbnz,
  aarch64_op_tbz,
  aarch64_op_tlbi_sys,
  aarch64_op_tst_ands_log_imm,
  aarch64_op_tst_ands_log_shift,
  aarch64_op_ubfiz_ubfm,
  aarch64_op_ubfm,
  aarch64_op_ubfx_ubfm,
  aarch64_op_udiv,
  aarch64_op_umaddl,
  aarch64_op_umnegl_umsubl,
  aarch64_op_umsubl,
  aarch64_op_umulh,
  aarch64_op_umull_umaddl,
  aarch64_op_uxtb_ubfm,
  aarch64_op_uxth_ubfm,
  aarch64_op_wfe_hint,
  aarch64_op_wfi_hint,
  aarch64_op_yield_hint,
}
number of instructions:  224
0            unallocated    0b11000000000000000000000000000 ( 0x18000000 )
1                    adc 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010000000000000000000000000 ( 0x1a000000 )
2                   adcs 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00111010000000000000000000000000 ( 0x3a000000 )
3         add_addsub_ext 	01111111111000000000000000000000 ( 0x7fe00000 ) 	00001011001000000000000000000000 ( 0xb200000 )
4         add_addsub_imm 	01111111000000000000000000000000 ( 0x7f000000 ) 	00010001000000000000000000000000 ( 0x11000000 )
5       add_addsub_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	00001011000000000000000000000000 ( 0xb000000 )
6        adds_addsub_ext 	01111111111000000000000000000000 ( 0x7fe00000 ) 	00101011001000000000000000000000 ( 0x2b200000 )
7        adds_addsub_imm 	01111111000000000000000000000000 ( 0x7f000000 ) 	00110001000000000000000000000000 ( 0x31000000 )
8      adds_addsub_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	00101011000000000000000000000000 ( 0x2b000000 )
9                    adr 	10011111000000000000000000000000 ( 0x9f000000 ) 	00010000000000000000000000000000 ( 0x10000000 )
10                   adrp 	10011111000000000000000000000000 ( 0x9f000000 ) 	10010000000000000000000000000000 ( 0x90000000 )
11            and_log_imm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00010010000000000000000000000000 ( 0x12000000 )
12          and_log_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	00001010000000000000000000000000 ( 0xa000000 )
13           ands_log_imm 	01111111100000000000000000000000 ( 0x7f800000 ) 	01110010000000000000000000000000 ( 0x72000000 )
14         ands_log_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	01101010000000000000000000000000 ( 0x6a000000 )
15               asr_asrv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010100000000000 ( 0x1ac02800 )
16               asr_sbfm 	01111111100000000111110000000000 ( 0x7f807c00 ) 	00010011000000000111110000000000 ( 0x13007c00 )
17                   asrv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010100000000000 ( 0x1ac02800 )
18                 at_sys 	11111111111110001111111100000000 ( 0xfff8ff00 ) 	11010101000010000111100000000000 ( 0xd5087800 )
19                 b_cond 	11111111000000000000000000010000 ( 0xff000010 ) 	01010100000000000000000000000000 ( 0x54000000 )
20               b_uncond 	11111100000000000000000000000000 ( 0xfc000000 ) 	00010100000000000000000000000000 ( 0x14000000 )
21                bfi_bfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00110011000000000000000000000000 ( 0x33000000 )
22                    bfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00110011000000000000000000000000 ( 0x33000000 )
23              bfxil_bfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00110011000000000000000000000000 ( 0x33000000 )
24          bic_log_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	00001010001000000000000000000000 ( 0xa200000 )
25                   bics 	01111111001000000000000000000000 ( 0x7f200000 ) 	01101010001000000000000000000000 ( 0x6a200000 )
26                     bl 	11111100000000000000000000000000 ( 0xfc000000 ) 	10010100000000000000000000000000 ( 0x94000000 )
27                    blr 	11111111111111111111110000011111 ( 0xfffffc1f ) 	11010110001111110000000000000000 ( 0xd63f0000 )
28                     br 	11111111111111111111110000011111 ( 0xfffffc1f ) 	11010110000111110000000000000000 ( 0xd61f0000 )
29                    brk 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100001000000000000000000000 ( 0xd4200000 )
30                   cbnz 	01111111000000000000000000000000 ( 0x7f000000 ) 	00110101000000000000000000000000 ( 0x35000000 )
31                    cbz 	01111111000000000000000000000000 ( 0x7f000000 ) 	00110100000000000000000000000000 ( 0x34000000 )
32               ccmn_imm 	01111111111000000000110000010000 ( 0x7fe00c10 ) 	00111010010000000000100000000000 ( 0x3a400800 )
33               ccmn_reg 	01111111111000000000110000010000 ( 0x7fe00c10 ) 	00111010010000000000000000000000 ( 0x3a400000 )
34               ccmp_imm 	01111111111000000000110000010000 ( 0x7fe00c10 ) 	01111010010000000000100000000000 ( 0x7a400800 )
35               ccmp_reg 	01111111111000000000110000010000 ( 0x7fe00c10 ) 	01111010010000000000000000000000 ( 0x7a400000 )
36             cinc_csinc 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	00011010100000000000010000000000 ( 0x1a800400 )
37             cinv_csinv 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	01011010100000000000000000000000 ( 0x5a800000 )
38                  clrex 	11111111111111111111000011111111 ( 0xfffff0ff ) 	11010101000000110011000001011111 ( 0xd503305f )
39                cls_int 	01111111111111111111110000000000 ( 0x7ffffc00 ) 	01011010110000000001010000000000 ( 0x5ac01400 )
40                clz_int 	01111111111111111111110000000000 ( 0x7ffffc00 ) 	01011010110000000001000000000000 ( 0x5ac01000 )
41    cmn_adds_addsub_ext 	01111111111000000000000000011111 ( 0x7fe0001f ) 	00101011001000000000000000011111 ( 0x2b20001f )
42    cmn_adds_addsub_imm 	01111111000000000000000000011111 ( 0x7f00001f ) 	00110001000000000000000000011111 ( 0x3100001f )
43  cmn_adds_addsub_shift 	01111111001000000000000000011111 ( 0x7f20001f ) 	00101011000000000000000000011111 ( 0x2b00001f )
44    cmp_subs_addsub_ext 	01111111111000000000000000011111 ( 0x7fe0001f ) 	01101011001000000000000000011111 ( 0x6b20001f )
45    cmp_subs_addsub_imm 	01111111000000000000000000011111 ( 0x7f00001f ) 	01110001000000000000000000011111 ( 0x7100001f )
46  cmp_subs_addsub_shift 	01111111001000000000000000011111 ( 0x7f20001f ) 	01101011000000000000000000011111 ( 0x6b00001f )
47             cneg_csneg 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	01011010100000000000010000000000 ( 0x5a800400 )
48                  crc32 	01111111111000001111000000000000 ( 0x7fe0f000 ) 	00011010110000000100000000000000 ( 0x1ac04000 )
49                 crc32c 	01111111111000001111000000000000 ( 0x7fe0f000 ) 	00011010110000000101000000000000 ( 0x1ac05000 )
50                   csel 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	00011010100000000000000000000000 ( 0x1a800000 )
51             cset_csinc 	01111111111111110000111111100000 ( 0x7fff0fe0 ) 	00011010100111110000011111100000 ( 0x1a9f07e0 )
52            csetm_csinv 	01111111111111110000111111100000 ( 0x7fff0fe0 ) 	01011010100111110000001111100000 ( 0x5a9f03e0 )
53                  csinc 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	00011010100000000000010000000000 ( 0x1a800400 )
54                  csinv 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	01011010100000000000000000000000 ( 0x5a800000 )
55                  csneg 	01111111111000000000110000000000 ( 0x7fe00c00 ) 	01011010100000000000010000000000 ( 0x5a800400 )
56                 dc_sys 	11111111111110001111000000000000 ( 0xfff8f000 ) 	11010101000010000111000000000000 ( 0xd5087000 )
57                  dcps1 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100101000000000000000000001 ( 0xd4a00001 )
58                  dcps2 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100101000000000000000000010 ( 0xd4a00002 )
59                  dcps3 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100101000000000000000000011 ( 0xd4a00003 )
60                    dmb 	11111111111111111111000011111111 ( 0xfffff0ff ) 	11010101000000110011000010111111 ( 0xd50330bf )
61                   drps 	11111111111111111111111111111111 ( 0xffffffff ) 	11010110101111110000001111100000 ( 0xd6bf03e0 )
62                    dsb 	11111111111111111111000011111111 ( 0xfffff0ff ) 	11010101000000110011000010011111 ( 0xd503309f )
63                    eon 	01111111001000000000000000000000 ( 0x7f200000 ) 	01001010001000000000000000000000 ( 0x4a200000 )
64            eor_log_imm 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010010000000000000000000000000 ( 0x52000000 )
65          eor_log_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	01001010000000000000000000000000 ( 0x4a000000 )
66                   eret 	11111111111111111111111111111111 ( 0xffffffff ) 	11010110100111110000001111100000 ( 0xd69f03e0 )
67                   extr 	01111111101000000000000000000000 ( 0x7fa00000 ) 	00010011100000000000000000000000 ( 0x13800000 )
68                   hint 	11111111111111111111000000011111 ( 0xfffff01f ) 	11010101000000110010000000011111 ( 0xd503201f )
69                    hlt 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100010000000000000000000000 ( 0xd4400000 )
70                    hvc 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100000000000000000000000010 ( 0xd4000002 )
71                 ic_sys 	11111111111110001111000000000000 ( 0xfff8f000 ) 	11010101000010000111000000000000 ( 0xd5087000 )
72                    isb 	11111111111111111111000011111111 ( 0xfffff0ff ) 	11010101000000110011000011011111 ( 0xd50330df )
73                   ldar 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000110000001000000000000000 ( 0x88c08000 )
74                  ldarb 	11111111111000001000000000000000 ( 0xffe08000 ) 	00001000110000001000000000000000 ( 0x8c08000 )
75                  ldarh 	11111111111000001000000000000000 ( 0xffe08000 ) 	01001000110000001000000000000000 ( 0x48c08000 )
76                  ldaxp 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000011000001000000000000000 ( 0x88608000 )
77                  ldaxr 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000010000001000000000000000 ( 0x88408000 )
78                 ldaxrb 	11111111111000001000000000000000 ( 0xffe08000 ) 	00001000010000001000000000000000 ( 0x8408000 )
79                 ldaxrh 	11111111111000001000000000000000 ( 0xffe08000 ) 	01001000010000001000000000000000 ( 0x48408000 )
80               ldnp_gen 	01111111110000000000000000000000 ( 0x7fc00000 ) 	00101000010000000000000000000000 ( 0x28400000 )
81                ldp_gen 	01111111110000000000000000000000 ( 0x7fc00000 ) 	00101000110000000000000000000000 ( 0x28c00000 )
82                  ldpsw 	11111111110000000000000000000000 ( 0xffc00000 ) 	01101000110000000000000000000000 ( 0x68c00000 )
83            ldr_imm_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000010000000000010000000000 ( 0xb8400400 )
84            ldr_lit_gen 	10111111000000000000000000000000 ( 0xbf000000 ) 	00011000000000000000000000000000 ( 0x18000000 )
85            ldr_reg_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000011000000000100000000000 ( 0xb8600800 )
86               ldrb_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000010000000000010000000000 ( 0x38400400 )
87               ldrb_reg 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000011000000000100000000000 ( 0x38600800 )
88               ldrh_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000010000000000010000000000 ( 0x78400400 )
89               ldrh_reg 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000011000000000100000000000 ( 0x78600800 )
90              ldrsb_imm 	11111111101000000000110000000000 ( 0xffa00c00 ) 	00111000100000000000010000000000 ( 0x38800400 )
91              ldrsb_reg 	11111111101000000000110000000000 ( 0xffa00c00 ) 	00111000101000000000100000000000 ( 0x38a00800 )
92              ldrsh_imm 	11111111101000000000110000000000 ( 0xffa00c00 ) 	01111000100000000000010000000000 ( 0x78800400 )
93              ldrsh_reg 	11111111101000000000110000000000 ( 0xffa00c00 ) 	01111000101000000000100000000000 ( 0x78a00800 )
94              ldrsw_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	10111000100000000000010000000000 ( 0xb8800400 )
95              ldrsw_lit 	11111111000000000000000000000000 ( 0xff000000 ) 	10011000000000000000000000000000 ( 0x98000000 )
96              ldrsw_reg 	11111111111000000000110000000000 ( 0xffe00c00 ) 	10111000101000000000100000000000 ( 0xb8a00800 )
97                   ldtr 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000010000000000100000000000 ( 0xb8400800 )
98                  ldtrb 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000010000000000100000000000 ( 0x38400800 )
99                  ldtrh 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000010000000000100000000000 ( 0x78400800 )
100                 ldtrsb 	11111111101000000000110000000000 ( 0xffa00c00 ) 	00111000100000000000100000000000 ( 0x38800800 )
101                 ldtrsh 	11111111101000000000110000000000 ( 0xffa00c00 ) 	01111000100000000000100000000000 ( 0x78800800 )
102                 ldtrsw 	11111111111000000000110000000000 ( 0xffe00c00 ) 	10111000100000000000100000000000 ( 0xb8800800 )
103               ldur_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000010000000000000000000000 ( 0xb8400000 )
104                  ldurb 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000010000000000000000000000 ( 0x38400000 )
105                  ldurh 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000010000000000000000000000 ( 0x78400000 )
106                 ldursb 	11111111101000000000110000000000 ( 0xffa00c00 ) 	00111000100000000000000000000000 ( 0x38800000 )
107                 ldursh 	11111111101000000000110000000000 ( 0xffa00c00 ) 	01111000100000000000000000000000 ( 0x78800000 )
108                 ldursw 	11111111111000000000110000000000 ( 0xffe00c00 ) 	10111000100000000000000000000000 ( 0xb8800000 )
109                   ldxp 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000011000000000000000000000 ( 0x88600000 )
110                   ldxr 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000010000000000000000000000 ( 0x88400000 )
111                  ldxrb 	11111111111000001000000000000000 ( 0xffe08000 ) 	00001000010000000000000000000000 ( 0x8400000 )
112                  ldxrh 	11111111111000001000000000000000 ( 0xffe08000 ) 	01001000010000000000000000000000 ( 0x48400000 )
113               lsl_lslv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010000000000000 ( 0x1ac02000 )
114               lsl_ubfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010011000000000000000000000000 ( 0x53000000 )
115                   lslv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010000000000000 ( 0x1ac02000 )
116               lsr_lsrv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010010000000000 ( 0x1ac02400 )
117               lsr_ubfm 	01111111100000000111110000000000 ( 0x7f807c00 ) 	01010011000000000111110000000000 ( 0x53007c00 )
118                   lsrv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010010000000000 ( 0x1ac02400 )
119                   madd 	01111111111000001000000000000000 ( 0x7fe08000 ) 	00011011000000000000000000000000 ( 0x1b000000 )
120              mneg_msub 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011011000000001111110000000000 ( 0x1b00fc00 )
121     mov_add_addsub_imm 	01111111111111111111110000000000 ( 0x7ffffc00 ) 	00010001000000000000000000000000 ( 0x11000000 )
122               mov_movn 	01111111100000000000000000000000 ( 0x7f800000 ) 	00010010100000000000000000000000 ( 0x12800000 )
123               mov_movz 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010010100000000000000000000000 ( 0x52800000 )
124        mov_orr_log_imm 	01111111100000000000001111100000 ( 0x7f8003e0 ) 	00110010000000000000001111100000 ( 0x320003e0 )
125      mov_orr_log_shift 	01111111111000001111111111100000 ( 0x7fe0ffe0 ) 	00101010000000000000001111100000 ( 0x2a0003e0 )
126                   movk 	01111111100000000000000000000000 ( 0x7f800000 ) 	01110010100000000000000000000000 ( 0x72800000 )
127                   movn 	01111111100000000000000000000000 ( 0x7f800000 ) 	00010010100000000000000000000000 ( 0x12800000 )
128                   movz 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010010100000000000000000000000 ( 0x52800000 )
129                    mrs 	11111111111100000000000000000000 ( 0xfff00000 ) 	11010101001100000000000000000000 ( 0xd5300000 )
130                msr_imm 	11111111111110001111000000011111 ( 0xfff8f01f ) 	11010101000000000100000000011111 ( 0xd500401f )
131                msr_reg 	11111111111100000000000000000000 ( 0xfff00000 ) 	11010101000100000000000000000000 ( 0xd5100000 )
132                   msub 	01111111111000001000000000000000 ( 0x7fe08000 ) 	00011011000000001000000000000000 ( 0x1b008000 )
133               mul_madd 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011011000000000111110000000000 ( 0x1b007c00 )
134      mvn_orn_log_shift 	01111111001000000000001111100000 ( 0x7f2003e0 ) 	00101010001000000000001111100000 ( 0x2a2003e0 )
135   neg_sub_addsub_shift 	01111111001000000000001111100000 ( 0x7f2003e0 ) 	01001011000000000000001111100000 ( 0x4b0003e0 )
136 negs_subs_addsub_shift 	01111111001000000000001111100000 ( 0x7f2003e0 ) 	01101011000000000000001111100000 ( 0x6b0003e0 )
137                ngc_sbc 	01111111111000001111111111100000 ( 0x7fe0ffe0 ) 	01011010000000000000001111100000 ( 0x5a0003e0 )
138              ngcs_sbcs 	01111111111000001111111111100000 ( 0x7fe0ffe0 ) 	01111010000000000000001111100000 ( 0x7a0003e0 )
139               nop_hint 	11111111111111111111111111111111 ( 0xffffffff ) 	11010101000000110010000000011111 ( 0xd503201f )
140          orn_log_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	00101010001000000000000000000000 ( 0x2a200000 )
141            orr_log_imm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00110010000000000000000000000000 ( 0x32000000 )
142          orr_log_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	00101010000000000000000000000000 ( 0x2a000000 )
143               prfm_imm 	11111111110000000000000000000000 ( 0xffc00000 ) 	11111001100000000000000000000000 ( 0xf9800000 )
144               prfm_lit 	11111111000000000000000000000000 ( 0xff000000 ) 	11011000000000000000000000000000 ( 0xd8000000 )
145               prfm_reg 	11111111111000000000110000000000 ( 0xffe00c00 ) 	11111000101000000000100000000000 ( 0xf8a00800 )
146                  prfum 	11111111111000000000110000000000 ( 0xffe00c00 ) 	11111000100000000000000000000000 ( 0xf8800000 )
147               rbit_int 	01111111111111111111110000000000 ( 0x7ffffc00 ) 	01011010110000000000000000000000 ( 0x5ac00000 )
148                    ret 	11111111111111111111110000011111 ( 0xfffffc1f ) 	11010110010111110000000000000000 ( 0xd65f0000 )
149                    rev 	01111111111111111111100000000000 ( 0x7ffff800 ) 	01011010110000000000100000000000 ( 0x5ac00800 )
150              rev16_int 	01111111111111111111110000000000 ( 0x7ffffc00 ) 	01011010110000000000010000000000 ( 0x5ac00400 )
151              rev32_int 	11111111111111111111110000000000 ( 0xfffffc00 ) 	11011010110000000000100000000000 ( 0xdac00800 )
152               ror_extr 	01111111101000000000000000000000 ( 0x7fa00000 ) 	00010011100000000000000000000000 ( 0x13800000 )
153               ror_rorv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010110000000000 ( 0x1ac02c00 )
154                   rorv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000010110000000000 ( 0x1ac02c00 )
155                    sbc 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	01011010000000000000000000000000 ( 0x5a000000 )
156                   sbcs 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	01111010000000000000000000000000 ( 0x7a000000 )
157             sbfiz_sbfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00010011000000000000000000000000 ( 0x13000000 )
158                   sbfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00010011000000000000000000000000 ( 0x13000000 )
159              sbfx_sbfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	00010011000000000000000000000000 ( 0x13000000 )
160                   sdiv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000000110000000000 ( 0x1ac00c00 )
161               sev_hint 	11111111111111111111111111111111 ( 0xffffffff ) 	11010101000000110010000010011111 ( 0xd503209f )
162              sevl_hint 	11111111111111111111111111111111 ( 0xffffffff ) 	11010101000000110010000010111111 ( 0xd50320bf )
163                 smaddl 	11111111111000001000000000000000 ( 0xffe08000 ) 	10011011001000000000000000000000 ( 0x9b200000 )
164                    smc 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100000000000000000000000011 ( 0xd4000003 )
165          smnegl_smsubl 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	10011011001000001111110000000000 ( 0x9b20fc00 )
166                 smsubl 	11111111111000001000000000000000 ( 0xffe08000 ) 	10011011001000001000000000000000 ( 0x9b208000 )
167                  smulh 	11111111111000001000000000000000 ( 0xffe08000 ) 	10011011010000000000000000000000 ( 0x9b400000 )
168           smull_smaddl 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	10011011001000000111110000000000 ( 0x9b207c00 )
169                   stlr 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000100000001000000000000000 ( 0x88808000 )
170                  stlrb 	11111111111000001000000000000000 ( 0xffe08000 ) 	00001000100000001000000000000000 ( 0x8808000 )
171                  stlrh 	11111111111000001000000000000000 ( 0xffe08000 ) 	01001000100000001000000000000000 ( 0x48808000 )
172                  stlxp 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000001000001000000000000000 ( 0x88208000 )
173                  stlxr 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000000000001000000000000000 ( 0x88008000 )
174                 stlxrb 	11111111111000001000000000000000 ( 0xffe08000 ) 	00001000000000001000000000000000 ( 0x8008000 )
175                 stlxrh 	11111111111000001000000000000000 ( 0xffe08000 ) 	01001000000000001000000000000000 ( 0x48008000 )
176               stnp_gen 	01111111110000000000000000000000 ( 0x7fc00000 ) 	00101000000000000000000000000000 ( 0x28000000 )
177                stp_gen 	01111111110000000000000000000000 ( 0x7fc00000 ) 	00101000100000000000000000000000 ( 0x28800000 )
178            str_imm_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000000000000000010000000000 ( 0xb8000400 )
179            str_reg_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000001000000000100000000000 ( 0xb8200800 )
180               strb_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000000000000000010000000000 ( 0x38000400 )
181               strb_reg 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000001000000000100000000000 ( 0x38200800 )
182               strh_imm 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000000000000000010000000000 ( 0x78000400 )
183               strh_reg 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000001000000000100000000000 ( 0x78200800 )
184                   sttr 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000000000000000100000000000 ( 0xb8000800 )
185                  sttrb 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000000000000000100000000000 ( 0x38000800 )
186                  sttrh 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000000000000000100000000000 ( 0x78000800 )
187               stur_gen 	10111111111000000000110000000000 ( 0xbfe00c00 ) 	10111000000000000000000000000000 ( 0xb8000000 )
188                  sturb 	11111111111000000000110000000000 ( 0xffe00c00 ) 	00111000000000000000000000000000 ( 0x38000000 )
189                  sturh 	11111111111000000000110000000000 ( 0xffe00c00 ) 	01111000000000000000000000000000 ( 0x78000000 )
190                   stxp 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000001000000000000000000000 ( 0x88200000 )
191                   stxr 	10111111111000001000000000000000 ( 0xbfe08000 ) 	10001000000000000000000000000000 ( 0x88000000 )
192                  stxrb 	11111111111000001000000000000000 ( 0xffe08000 ) 	00001000000000000000000000000000 ( 0x8000000 )
193                  stxrh 	11111111111000001000000000000000 ( 0xffe08000 ) 	01001000000000000000000000000000 ( 0x48000000 )
194         sub_addsub_ext 	01111111111000000000000000000000 ( 0x7fe00000 ) 	01001011001000000000000000000000 ( 0x4b200000 )
195         sub_addsub_imm 	01111111000000000000000000000000 ( 0x7f000000 ) 	01010001000000000000000000000000 ( 0x51000000 )
196       sub_addsub_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	01001011000000000000000000000000 ( 0x4b000000 )
197        subs_addsub_ext 	01111111111000000000000000000000 ( 0x7fe00000 ) 	01101011001000000000000000000000 ( 0x6b200000 )
198        subs_addsub_imm 	01111111000000000000000000000000 ( 0x7f000000 ) 	01110001000000000000000000000000 ( 0x71000000 )
199      subs_addsub_shift 	01111111001000000000000000000000 ( 0x7f200000 ) 	01101011000000000000000000000000 ( 0x6b000000 )
200                    svc 	11111111111000000000000000011111 ( 0xffe0001f ) 	11010100000000000000000000000001 ( 0xd4000001 )
201              sxtb_sbfm 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00010011000000000001110000000000 ( 0x13001c00 )
202              sxth_sbfm 	01111111101111111111110000000000 ( 0x7fbffc00 ) 	00010011000000000011110000000000 ( 0x13003c00 )
203              sxtw_sbfm 	11111111111111111111110000000000 ( 0xfffffc00 ) 	10010011010000000111110000000000 ( 0x93407c00 )
204                    sys 	11111111111110000000000000000000 ( 0xfff80000 ) 	11010101000010000000000000000000 ( 0xd5080000 )
205                   sysl 	11111111111110000000000000000000 ( 0xfff80000 ) 	11010101001010000000000000000000 ( 0xd5280000 )
206                   tbnz 	01111111000000000000000000000000 ( 0x7f000000 ) 	00110111000000000000000000000000 ( 0x37000000 )
207                    tbz 	01111111000000000000000000000000 ( 0x7f000000 ) 	00110110000000000000000000000000 ( 0x36000000 )
208               tlbi_sys 	11111111111110001111000000000000 ( 0xfff8f000 ) 	11010101000010001000000000000000 ( 0xd5088000 )
209       tst_ands_log_imm 	01111111100000000000000000011111 ( 0x7f80001f ) 	01110010000000000000000000011111 ( 0x7200001f )
210     tst_ands_log_shift 	01111111001000000000000000011111 ( 0x7f20001f ) 	01101010000000000000000000011111 ( 0x6a00001f )
211             ubfiz_ubfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010011000000000000000000000000 ( 0x53000000 )
212                   ubfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010011000000000000000000000000 ( 0x53000000 )
213              ubfx_ubfm 	01111111100000000000000000000000 ( 0x7f800000 ) 	01010011000000000000000000000000 ( 0x53000000 )
214                   udiv 	01111111111000001111110000000000 ( 0x7fe0fc00 ) 	00011010110000000000100000000000 ( 0x1ac00800 )
215                 umaddl 	11111111111000001000000000000000 ( 0xffe08000 ) 	10011011101000000000000000000000 ( 0x9ba00000 )
216          umnegl_umsubl 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	10011011101000001111110000000000 ( 0x9ba0fc00 )
217                 umsubl 	11111111111000001000000000000000 ( 0xffe08000 ) 	10011011101000001000000000000000 ( 0x9ba08000 )
218                  umulh 	11111111111000001000000000000000 ( 0xffe08000 ) 	10011011110000000000000000000000 ( 0x9bc00000 )
219           umull_umaddl 	11111111111000001111110000000000 ( 0xffe0fc00 ) 	10011011101000000111110000000000 ( 0x9ba07c00 )
220              uxtb_ubfm 	11111111111111111111110000000000 ( 0xfffffc00 ) 	01010011000000000001110000000000 ( 0x53001c00 )
221              uxth_ubfm 	11111111111111111111110000000000 ( 0xfffffc00 ) 	01010011000000000011110000000000 ( 0x53003c00 )
222               wfe_hint 	11111111111111111111111111111111 ( 0xffffffff ) 	11010101000000110010000001011111 ( 0xd503205f )
223               wfi_hint 	11111111111111111111111111111111 ( 0xffffffff ) 	11010101000000110010000001111111 ( 0xd503207f )
224             yield_hint 	11111111111111111111111111111111 ( 0xffffffff ) 	11010101000000110010000000111111 ( 0xd503203f )
225
*** instruction table ***
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_unallocated, 	"unallocated	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_adc, 	"adc	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_adcs, 	"adcs	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_add_addsub_ext, 	"add	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_add_addsub_imm, 	"add	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_add_addsub_shift, 	"add	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_adds_addsub_ext, 	"adds	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_adds_addsub_imm, 	"adds	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_adds_addsub_shift, 	"adds	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_adr, 	"adr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_adrp, 	"adrp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_and_log_imm, 	"and	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_and_log_shift, 	"and	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ands_log_imm, 	"ands	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ands_log_shift, 	"ands	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_asr_asrv, 	"asr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_asr_sbfm, 	"asr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_asrv, 	"asrv	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_at_sys, 	"at	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_b_cond, 	"b	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_b_uncond, 	"b	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_bfi_bfm, 	"bfi	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_bfm, 	"bfm	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_bfxil_bfm, 	"bfxil	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_bic_log_shift, 	"bic	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_bics, 	"bics	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_bl, 	"bl	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_blr, 	"blr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_br, 	"br	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_brk, 	"brk	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_cbnz, 	"cbnz	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_cbz, 	"cbz	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ccmn_imm, 	"ccmn	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ccmn_reg, 	"ccmn	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ccmp_imm, 	"ccmp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ccmp_reg, 	"ccmp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_cinc_csinc, 	"cinc	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_cinv_csinv, 	"cinv	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_clrex, 	"clrex	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_cls_int, 	"cls	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_clz_int, 	"clz	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmn_adds_addsub_ext, 	"cmn	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmn_adds_addsub_imm, 	"cmn	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmn_adds_addsub_shift, 	"cmn	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmp_subs_addsub_ext, 	"cmp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmp_subs_addsub_imm, 	"cmp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_cmp_subs_addsub_shift, 	"cmp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_cneg_csneg, 	"cneg	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_crc32, 	"crc32	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_crc32c, 	"crc32c	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_csel, 	"csel	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_cset_csinc, 	"cset	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_csetm_csinv, 	"csetm	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_csinc, 	"csinc	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_csinv, 	"csinv	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_csneg, 	"csneg	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_dc_sys, 	"dc	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_dcps1, 	"dcps1	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_dcps2, 	"dcps2	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_dcps3, 	"dcps3	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_dmb, 	"dmb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_drps, 	"drps	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_dsb, 	"dsb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_eon, 	"eon	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_eor_log_imm, 	"eor	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_eor_log_shift, 	"eor	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_eret, 	"eret	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_extr, 	"extr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_hint, 	"hint	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_hlt, 	"hlt	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_hvc, 	"hvc	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ic_sys, 	"ic	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_isb, 	"isb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldar, 	"ldar	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldarb, 	"ldarb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldarh, 	"ldarh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldaxp, 	"ldaxp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldaxr, 	"ldaxr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldaxrb, 	"ldaxrb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldaxrh, 	"ldaxrh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldnp_gen, 	"ldnp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldp_gen, 	"ldp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldpsw, 	"ldpsw	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldr_imm_gen, 	"ldr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldr_lit_gen, 	"ldr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldr_reg_gen, 	"ldr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrb_imm, 	"ldrb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrb_reg, 	"ldrb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrh_imm, 	"ldrh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrh_reg, 	"ldrh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsb_imm, 	"ldrsb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsb_reg, 	"ldrsb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsh_imm, 	"ldrsh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsh_reg, 	"ldrsh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsw_imm, 	"ldrsw	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsw_lit, 	"ldrsw	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldrsw_reg, 	"ldrsw	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldtr, 	"ldtr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldtrb, 	"ldtrb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldtrh, 	"ldtrh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldtrsb, 	"ldtrsb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldtrsh, 	"ldtrsh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldtrsw, 	"ldtrsw	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldur_gen, 	"ldur	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldurb, 	"ldurb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldurh, 	"ldurh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldursb, 	"ldursb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldursh, 	"ldursh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldursw, 	"ldursw	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldxp, 	"ldxp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldxr, 	"ldxr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldxrb, 	"ldxrb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ldxrh, 	"ldxrh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_lsl_lslv, 	"lsl	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_lsl_ubfm, 	"lsl	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_lslv, 	"lslv	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_lsr_lsrv, 	"lsr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_lsr_ubfm, 	"lsr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_lsrv, 	"lsrv	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_madd, 	"madd	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_mneg_msub, 	"mneg	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_add_addsub_imm, 	"mov	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_movn, 	"mov	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_movz, 	"mov	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_orr_log_imm, 	"mov	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_mov_orr_log_shift, 	"mov	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_movk, 	"movk	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_movn, 	"movn	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_movz, 	"movz	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_mrs, 	"mrs	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_msr_imm, 	"msr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_msr_reg, 	"msr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_msub, 	"msub	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_mul_madd, 	"mul	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_mvn_orn_log_shift, 	"mvn	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_neg_sub_addsub_shift, 	"neg	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_negs_subs_addsub_shift, 	"negs	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ngc_sbc, 	"ngc	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ngcs_sbcs, 	"ngcs	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_nop_hint, 	"nop	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_orn_log_shift, 	"orn	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_orr_log_imm, 	"orr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_orr_log_shift, 	"orr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_prfm_imm, 	"prfm	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_prfm_lit, 	"prfm	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_prfm_reg, 	"prfm	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_prfum, 	"prfum	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_rbit_int, 	"rbit	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ret, 	"ret	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_rev, 	"rev	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_rev16_int, 	"rev16	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_rev32_int, 	"rev32	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ror_extr, 	"ror	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ror_rorv, 	"ror	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_rorv, 	"rorv	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sbc, 	"sbc	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sbcs, 	"sbcs	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sbfiz_sbfm, 	"sbfiz	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sbfm, 	"sbfm	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sbfx_sbfm, 	"sbfx	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sdiv, 	"sdiv	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sev_hint, 	"sev	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sevl_hint, 	"sevl	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_smaddl, 	"smaddl	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_smc, 	"smc	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_smnegl_smsubl, 	"smnegl	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_smsubl, 	"smsubl	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_smulh, 	"smulh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_smull_smaddl, 	"smull	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlr, 	"stlr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlrb, 	"stlrb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlrh, 	"stlrh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlxp, 	"stlxp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlxr, 	"stlxr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlxrb, 	"stlxrb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stlxrh, 	"stlxrh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stnp_gen, 	"stnp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stp_gen, 	"stp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_str_imm_gen, 	"str	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_str_reg_gen, 	"str	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_strb_imm, 	"strb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_strb_reg, 	"strb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_strh_imm, 	"strh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_strh_reg, 	"strh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sttr, 	"sttr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sttrb, 	"sttrb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sttrh, 	"sttrh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stur_gen, 	"stur	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sturb, 	"sturb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sturh, 	"sturh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stxp, 	"stxp	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stxr, 	"stxr	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stxrb, 	"stxrb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_stxrh, 	"stxrh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sub_addsub_ext, 	"sub	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sub_addsub_imm, 	"sub	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sub_addsub_shift, 	"sub	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_subs_addsub_ext, 	"subs	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_subs_addsub_imm, 	"subs	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_subs_addsub_shift, 	"subs	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_svc, 	"svc	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sxtb_sbfm, 	"sxtb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sxth_sbfm, 	"sxth	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sxtw_sbfm, 	"sxtw	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sys, 	"sys	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_sysl, 	"sysl	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_tbnz, 	"tbnz	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_tbz, 	"tbz	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_tlbi_sys, 	"tlbi	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_tst_ands_log_imm, 	"tst	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_tst_ands_log_shift, 	"tst	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ubfiz_ubfm, 	"ubfiz	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ubfm, 	"ubfm	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_ubfx_ubfm, 	"ubfx	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_udiv, 	"udiv	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_umaddl, 	"umaddl	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_umnegl_umsubl, 	"umnegl	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_umsubl, 	"umsubl	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_umulh, 	"umulh	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_umull_umaddl, 	"umull	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_uxtb_ubfm, 	"uxtb	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_uxth_ubfm, 	"uxth	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_wfe_hint, 	"wfe	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_wfi_hint, 	"wfi	", list_of() ));
	aarch64_insn_table.push_back(aarch64_insn_entry(aarch64_op_yield_hint, 	"yield	", list_of() ));
*** decoder table ***
0x18000000
cur mask 0x18000000
branchNo 0
branchNo 3
branchNo 3
branchNo 1
branchNo 2
branchNo 1
branchNo 1
branchNo 2
branchNo 1
branchNo 2
branchNo 2
branchNo 2
branchNo 1
branchNo 2
branchNo 1
branchNo 3
branchNo 2
branchNo 3
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 1
branchNo 1
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 2
branchNo 3
branchNo 3
branchNo 1
branchNo 2
branchNo 1
branchNo 1
branchNo 2
branchNo 1
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 1
branchNo 2
branchNo 1
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 3
branchNo 2
branchNo 3
branchNo 3
branchNo 2
branchNo 3
branchNo 3
branchNo 3
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 1
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 3
branchNo 3
branchNo 1
branchNo 1
branchNo 1
branchNo 3
branchNo 3
branchNo 2
branchNo 1
branchNo 2
branchNo 1
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 2
branchNo 3
branchNo 3
branchNo 3
branchNo 2
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 2
branchNo 2
branchNo 2
branchNo 3
branchNo 2
branchNo 2
branchNo 3
branchNo 2
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 2
branchNo 1
branchNo 1
branchNo 2
branchNo 1
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 1
branchNo 2
branchNo 2
branchNo 2
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
	aarch_decoder_table[0]=aarch64_mask_entry(0x18000000, map_list_of(0,1)(1,2)(2,3)(3,4),-1);
[[0], [3, 5, 6, 8, 12, 14, 24, 25, 41, 43, 44, 46, 63, 65, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 109, 110, 111, 112, 125, 134, 135, 136, 140, 142, 169, 170, 171, 172, 173, 174, 175, 176, 177, 190, 191, 192, 193, 194, 196, 197, 199, 210], [4, 7, 9, 10, 11, 13, 16, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 38, 42, 45, 56, 57, 58, 59, 60, 61, 62, 64, 66, 67, 68, 69, 70, 71, 72, 114, 117, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 139, 141, 148, 152, 157, 158, 159, 161, 162, 164, 195, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 220, 221, 222, 223, 224], [1, 2, 15, 17, 32, 33, 34, 35, 36, 37, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 113, 115, 116, 118, 119, 120, 132, 133, 137, 138, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 160, 163, 165, 166, 167, 168, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 214, 215, 216, 217, 218, 219]]
	aarch_decoder_table[1]=aarch64_mask_entry(0x0, NULL,0);
0x27000000
cur mask 0x27000000
branchNo 3
branchNo 3
branchNo 11
branchNo 11
branchNo 2
branchNo 10
branchNo 2
branchNo 10
branchNo 11
branchNo 11
branchNo 11
branchNo 11
branchNo 2
branchNo 2
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 8
branchNo 8
branchNo 8
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 10
branchNo 10
branchNo 3
branchNo 11
branchNo 10
branchNo 10
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 8
branchNo 8
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 3
branchNo 3
branchNo 11
branchNo 11
branchNo 10
	aarch_decoder_table[2]=aarch64_mask_entry(0x27000000, map_list_of(0,5)(1,6)(2,7)(3,8)(4,9)(5,10),-1);
[[73, 74, 75, 76, 77, 78, 79, 109, 110, 111, 112, 169, 170, 171, 172, 173, 174, 175, 190, 191, 192, 193], [12, 24, 63, 65], [3, 5, 135, 194, 196], [80, 81, 82, 176, 177], [14, 25, 125, 134, 140, 142, 210], [6, 8, 41, 43, 44, 46, 136, 197, 199]]
0x80e08000
cur mask 0x80e08000
branchNo 29
branchNo 13
branchNo 13
branchNo 23
branchNo 21
branchNo 5
branchNo 5
branchNo 22
branchNo 20
branchNo 4
branchNo 4
branchNo 25
branchNo 9
branchNo 9
branchNo 19
branchNo 17
branchNo 1
branchNo 1
branchNo 18
branchNo 16
branchNo 0
branchNo 0
	aarch_decoder_table[5]=aarch64_mask_entry(0x80e08000, map_list_of(0,11)(1,12)(2,13)(3,14)(4,15)(5,16)(6,17)(7,18)(8,19)(9,20)(10,21)(11,22)(12,23)(13,24)(14,25)(15,26),-1);
[[192, 193], [174, 175], [111, 112], [78, 79], [170, 171], [74, 75], [191], [173], [190], [172], [110], [77], [109], [76], [169], [73]]
0x40000000
cur mask 0x40000000
branchNo 0
branchNo 1
	aarch_decoder_table[11]=aarch64_mask_entry(0x40000000, map_list_of(0,27)(1,28),-1);
[[192], [193]]
	aarch_decoder_table[27]=aarch64_mask_entry(0x0, NULL,192);
	aarch_decoder_table[28]=aarch64_mask_entry(0x0, NULL,193);
0x40000000
cur mask 0x40000000
branchNo 0
branchNo 1
	aarch_decoder_table[12]=aarch64_mask_entry(0x40000000, map_list_of(0,29)(1,30),-1);
[[174], [175]]
	aarch_decoder_table[29]=aarch64_mask_entry(0x0, NULL,174);
	aarch_decoder_table[30]=aarch64_mask_entry(0x0, NULL,175);
0x40000000
cur mask 0x40000000
branchNo 0
branchNo 1
	aarch_decoder_table[13]=aarch64_mask_entry(0x40000000, map_list_of(0,31)(1,32),-1);
[[111], [112]]
	aarch_decoder_table[31]=aarch64_mask_entry(0x0, NULL,111);
	aarch_decoder_table[32]=aarch64_mask_entry(0x0, NULL,112);
0x40000000
cur mask 0x40000000
branchNo 0
branchNo 1
	aarch_decoder_table[14]=aarch64_mask_entry(0x40000000, map_list_of(0,33)(1,34),-1);
[[78], [79]]
	aarch_decoder_table[33]=aarch64_mask_entry(0x0, NULL,78);
	aarch_decoder_table[34]=aarch64_mask_entry(0x0, NULL,79);
0x40000000
cur mask 0x40000000
branchNo 0
branchNo 1
	aarch_decoder_table[15]=aarch64_mask_entry(0x40000000, map_list_of(0,35)(1,36),-1);
[[170], [171]]
	aarch_decoder_table[35]=aarch64_mask_entry(0x0, NULL,170);
	aarch_decoder_table[36]=aarch64_mask_entry(0x0, NULL,171);
0x40000000
cur mask 0x40000000
branchNo 0
branchNo 1
	aarch_decoder_table[16]=aarch64_mask_entry(0x40000000, map_list_of(0,37)(1,38),-1);
[[74], [75]]
	aarch_decoder_table[37]=aarch64_mask_entry(0x0, NULL,74);
	aarch_decoder_table[38]=aarch64_mask_entry(0x0, NULL,75);
	aarch_decoder_table[17]=aarch64_mask_entry(0x0, NULL,191);
	aarch_decoder_table[18]=aarch64_mask_entry(0x0, NULL,173);
	aarch_decoder_table[19]=aarch64_mask_entry(0x0, NULL,190);
	aarch_decoder_table[20]=aarch64_mask_entry(0x0, NULL,172);
	aarch_decoder_table[21]=aarch64_mask_entry(0x0, NULL,110);
	aarch_decoder_table[22]=aarch64_mask_entry(0x0, NULL,77);
	aarch_decoder_table[23]=aarch64_mask_entry(0x0, NULL,109);
	aarch_decoder_table[24]=aarch64_mask_entry(0x0, NULL,76);
	aarch_decoder_table[25]=aarch64_mask_entry(0x0, NULL,169);
	aarch_decoder_table[26]=aarch64_mask_entry(0x0, NULL,73);
0x40200000
cur mask 0x40200000
branchNo 0
branchNo 1
branchNo 3
branchNo 2
	aarch_decoder_table[6]=aarch64_mask_entry(0x40200000, map_list_of(0,39)(1,40)(2,41)(3,42),-1);
[[12], [24], [65], [63]]
	aarch_decoder_table[39]=aarch64_mask_entry(0x0, NULL,12);
	aarch_decoder_table[40]=aarch64_mask_entry(0x0, NULL,24);
	aarch_decoder_table[41]=aarch64_mask_entry(0x0, NULL,65);
	aarch_decoder_table[42]=aarch64_mask_entry(0x0, NULL,63);
0x40200000
cur mask 0x40200000
branchNo 1
branchNo 0
branchNo 2
branchNo 3
branchNo 2
	aarch_decoder_table[7]=aarch64_mask_entry(0x40200000, map_list_of(0,43)(1,44)(2,45)(3,46),-1);
[[5], [3], [135, 196], [194]]
	aarch_decoder_table[43]=aarch64_mask_entry(0x0, NULL,5);
	aarch_decoder_table[44]=aarch64_mask_entry(0x0, NULL,3);
0x3e0
cur mask 0x3e0
branchNo 31
branchNo 0
	aarch_decoder_table[45]=aarch64_mask_entry(0x3e0, map_list_of(0,47)(1,48),-1);
[[196], [135]]
	aarch_decoder_table[47]=aarch64_mask_entry(0x0, NULL,196);
	aarch_decoder_table[48]=aarch64_mask_entry(0x0, NULL,135);
	aarch_decoder_table[46]=aarch64_mask_entry(0x0, NULL,194);
0x40c00000
cur mask 0x40c00000
branchNo 1
branchNo 3
branchNo 7
branchNo 0
branchNo 2
	aarch_decoder_table[8]=aarch64_mask_entry(0x40c00000, map_list_of(0,49)(1,50)(2,51)(3,52)(4,53),-1);
[[176], [80], [177], [81], [82]]
	aarch_decoder_table[49]=aarch64_mask_entry(0x0, NULL,176);
	aarch_decoder_table[50]=aarch64_mask_entry(0x0, NULL,80);
	aarch_decoder_table[51]=aarch64_mask_entry(0x0, NULL,177);
	aarch_decoder_table[52]=aarch64_mask_entry(0x0, NULL,81);
	aarch_decoder_table[53]=aarch64_mask_entry(0x0, NULL,82);
0x40200000
cur mask 0x40200000
branchNo 2
branchNo 3
branchNo 0
branchNo 1
branchNo 1
branchNo 0
branchNo 2
	aarch_decoder_table[9]=aarch64_mask_entry(0x40200000, map_list_of(0,54)(1,55)(2,56)(3,57),-1);
[[125, 142], [134, 140], [14, 210], [25]]
0x3e0
cur mask 0x3e0
branchNo 31
branchNo 0
	aarch_decoder_table[54]=aarch64_mask_entry(0x3e0, map_list_of(0,58)(1,59),-1);
[[142], [125]]
	aarch_decoder_table[58]=aarch64_mask_entry(0x0, NULL,142);
	aarch_decoder_table[59]=aarch64_mask_entry(0x0, NULL,125);
0x3e0
cur mask 0x3e0
branchNo 31
branchNo 0
	aarch_decoder_table[55]=aarch64_mask_entry(0x3e0, map_list_of(0,60)(1,61),-1);
[[140], [134]]
	aarch_decoder_table[60]=aarch64_mask_entry(0x0, NULL,140);
	aarch_decoder_table[61]=aarch64_mask_entry(0x0, NULL,134);
0x1f
cur mask 0x1f
branchNo 0
branchNo 31
	aarch_decoder_table[56]=aarch64_mask_entry(0x1f, map_list_of(0,62)(1,63),-1);
[[14], [210]]
	aarch_decoder_table[62]=aarch64_mask_entry(0x0, NULL,14);
	aarch_decoder_table[63]=aarch64_mask_entry(0x0, NULL,210);
	aarch_decoder_table[57]=aarch64_mask_entry(0x0, NULL,25);
0x40200000
cur mask 0x40200000
branchNo 1
branchNo 0
branchNo 1
branchNo 0
branchNo 3
branchNo 2
branchNo 2
branchNo 3
branchNo 2
	aarch_decoder_table[10]=aarch64_mask_entry(0x40200000, map_list_of(0,64)(1,65)(2,66)(3,67),-1);
[[8, 43], [6, 41], [46, 136, 199], [44, 197]]
0x1f
cur mask 0x1f
branchNo 0
branchNo 31
	aarch_decoder_table[64]=aarch64_mask_entry(0x1f, map_list_of(0,68)(1,69),-1);
[[8], [43]]
	aarch_decoder_table[68]=aarch64_mask_entry(0x0, NULL,8);
	aarch_decoder_table[69]=aarch64_mask_entry(0x0, NULL,43);
0xc00000
cur mask 0xc00000
branchNo 0
branchNo 0
	aarch_decoder_table[65]=aarch64_mask_entry(0xc00000, map_list_of(0,70),-1);
[[6, 41]]
0x1f
cur mask 0x1f
branchNo 0
branchNo 31
	aarch_decoder_table[70]=aarch64_mask_entry(0x1f, map_list_of(0,71)(1,72),-1);
[[6], [41]]
	aarch_decoder_table[71]=aarch64_mask_entry(0x0, NULL,6);
	aarch_decoder_table[72]=aarch64_mask_entry(0x0, NULL,41);
0x3ff
cur mask 0x3ff
branchNo 31
branchNo 992
branchNo 0
	aarch_decoder_table[66]=aarch64_mask_entry(0x3ff, map_list_of(0,73)(1,74)(2,75),-1);
[[199], [46], [136]]
	aarch_decoder_table[73]=aarch64_mask_entry(0x0, NULL,199);
	aarch_decoder_table[74]=aarch64_mask_entry(0x0, NULL,46);
	aarch_decoder_table[75]=aarch64_mask_entry(0x0, NULL,136);
0xc00000
cur mask 0xc00000
branchNo 0
branchNo 0
	aarch_decoder_table[67]=aarch64_mask_entry(0xc00000, map_list_of(0,76),-1);
[[44, 197]]
0x1f
cur mask 0x1f
branchNo 31
branchNo 0
	aarch_decoder_table[76]=aarch64_mask_entry(0x1f, map_list_of(0,77)(1,78),-1);
[[197], [44]]
	aarch_decoder_table[77]=aarch64_mask_entry(0x0, NULL,197);
	aarch_decoder_table[78]=aarch64_mask_entry(0x0, NULL,44);
0x4000000
cur mask 0x4000000
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 1
branchNo 1
branchNo 1
branchNo 0
branchNo 0
branchNo 0
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 0
branchNo 0
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 0
branchNo 1
branchNo 0
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 0
branchNo 1
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 1
branchNo 1
branchNo 1
branchNo 0
branchNo 0
branchNo 1
branchNo 0
branchNo 0
branchNo 0
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 1
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 1
branchNo 1
branchNo 1
	aarch_decoder_table[3]=aarch64_mask_entry(0x4000000, map_list_of(0,79)(1,80),-1);
[[4, 7, 9, 10, 11, 13, 16, 21, 22, 23, 42, 45, 64, 67, 114, 117, 121, 122, 123, 124, 126, 127, 128, 141, 152, 157, 158, 159, 195, 198, 201, 202, 203, 209, 211, 212, 213, 220, 221], [18, 19, 20, 26, 27, 28, 29, 30, 31, 38, 56, 57, 58, 59, 60, 61, 62, 66, 68, 69, 70, 71, 72, 129, 130, 131, 139, 148, 161, 162, 164, 200, 204, 205, 206, 207, 208, 222, 223, 224]]
0x3000000
cur mask 0x3000000
branchNo 1
branchNo 1
branchNo 0
branchNo 0
branchNo 2
branchNo 2
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 1
branchNo 1
branchNo 2
branchNo 3
branchNo 3
branchNo 3
branchNo 1
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 1
branchNo 1
branchNo 3
branchNo 3
branchNo 3
branchNo 2
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
	aarch_decoder_table[79]=aarch64_mask_entry(0x3000000, map_list_of(0,81)(1,82)(2,83)(3,84),-1);
[[9, 10], [4, 7, 42, 45, 121, 195, 198], [11, 13, 64, 122, 123, 124, 126, 127, 128, 141, 209], [16, 21, 22, 23, 67, 114, 117, 152, 157, 158, 159, 201, 202, 203, 211, 212, 213, 220, 221]]
0x80000000
cur mask 0x80000000
branchNo 0
branchNo 1
	aarch_decoder_table[81]=aarch64_mask_entry(0x80000000, map_list_of(0,85)(1,86),-1);
[[9], [10]]
	aarch_decoder_table[85]=aarch64_mask_entry(0x0, NULL,9);
	aarch_decoder_table[86]=aarch64_mask_entry(0x0, NULL,10);
0x60000000
cur mask 0x60000000
branchNo 0
branchNo 1
branchNo 1
branchNo 3
branchNo 0
branchNo 2
branchNo 3
	aarch_decoder_table[82]=aarch64_mask_entry(0x60000000, map_list_of(0,87)(1,88)(2,89)(3,90),-1);
[[4, 121], [7, 42], [195], [45, 198]]
	aarch_decoder_table[87]=aarch64_mask_entry(0x0, NULL,4);
0x1f
cur mask 0x1f
branchNo 0
branchNo 31
	aarch_decoder_table[88]=aarch64_mask_entry(0x1f, map_list_of(0,91)(1,92),-1);
[[7], [42]]
	aarch_decoder_table[91]=aarch64_mask_entry(0x0, NULL,7);
	aarch_decoder_table[92]=aarch64_mask_entry(0x0, NULL,42);
	aarch_decoder_table[89]=aarch64_mask_entry(0x0, NULL,195);
0x1f
cur mask 0x1f
branchNo 31
branchNo 0
	aarch_decoder_table[90]=aarch64_mask_entry(0x1f, map_list_of(0,93)(1,94),-1);
[[198], [45]]
	aarch_decoder_table[93]=aarch64_mask_entry(0x0, NULL,198);
	aarch_decoder_table[94]=aarch64_mask_entry(0x0, NULL,45);
0x60800000
cur mask 0x60800000
branchNo 0
branchNo 6
branchNo 4
branchNo 1
branchNo 5
branchNo 2
branchNo 7
branchNo 1
branchNo 5
branchNo 2
branchNo 6
	aarch_decoder_table[83]=aarch64_mask_entry(0x60800000, map_list_of(0,95)(1,96)(2,97)(3,98)(4,99)(5,100)(6,101),-1);
[[11], [122, 127], [124, 141], [64], [123, 128], [13, 209], [126]]
	aarch_decoder_table[95]=aarch64_mask_entry(0x0, NULL,11);
	aarch_decoder_table[96]=aarch64_mask_entry(0x0, NULL,122);
0x3e0
cur mask 0x3e0
branchNo 31
branchNo 0
	aarch_decoder_table[97]=aarch64_mask_entry(0x3e0, map_list_of(0,102)(1,103),-1);
[[141], [124]]
	aarch_decoder_table[102]=aarch64_mask_entry(0x0, NULL,141);
	aarch_decoder_table[103]=aarch64_mask_entry(0x0, NULL,124);
	aarch_decoder_table[98]=aarch64_mask_entry(0x0, NULL,64);
	aarch_decoder_table[99]=aarch64_mask_entry(0x0, NULL,123);
0x1f
cur mask 0x1f
branchNo 0
branchNo 31
	aarch_decoder_table[100]=aarch64_mask_entry(0x1f, map_list_of(0,104)(1,105),-1);
[[13], [209]]
	aarch_decoder_table[104]=aarch64_mask_entry(0x0, NULL,13);
	aarch_decoder_table[105]=aarch64_mask_entry(0x0, NULL,209);
	aarch_decoder_table[101]=aarch64_mask_entry(0x0, NULL,126);
0x60800000
cur mask 0x60800000
branchNo 0
branchNo 2
branchNo 2
branchNo 2
branchNo 1
branchNo 4
branchNo 4
branchNo 1
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 4
branchNo 4
branchNo 4
branchNo 4
branchNo 4
	aarch_decoder_table[84]=aarch64_mask_entry(0x60800000, map_list_of(0,106)(1,107)(2,108)(3,109),-1);
[[16, 157, 158, 159, 201, 202, 203], [67, 152], [21, 22, 23], [114, 117, 211, 212, 213, 220, 221]]
0x80402000
cur mask 0x80402000
branchNo 1
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 1
branchNo 7
	aarch_decoder_table[106]=aarch64_mask_entry(0x80402000, map_list_of(0,110)(1,111)(2,112),-1);
[[157, 158, 159, 201], [16, 202], [203]]
0x1c00
cur mask 0x1c00
branchNo 0
branchNo 0
branchNo 0
branchNo 7
	aarch_decoder_table[110]=aarch64_mask_entry(0x1c00, map_list_of(0,113)(1,114),-1);
[[157, 158, 159], [201]]
	aarch_decoder_table[113]=aarch64_mask_entry(0x0, NULL,157);
	aarch_decoder_table[114]=aarch64_mask_entry(0x0, NULL,201);
0x5c00
cur mask 0x5c00
branchNo 15
branchNo 7
	aarch_decoder_table[111]=aarch64_mask_entry(0x5c00, map_list_of(0,115)(1,116),-1);
[[202], [16]]
	aarch_decoder_table[115]=aarch64_mask_entry(0x0, NULL,202);
	aarch_decoder_table[116]=aarch64_mask_entry(0x0, NULL,16);
	aarch_decoder_table[112]=aarch64_mask_entry(0x0, NULL,203);
0x200000
cur mask 0x200000
branchNo 0
branchNo 0
	aarch_decoder_table[107]=aarch64_mask_entry(0x200000, map_list_of(0,117),-1);
[[67, 152]]
	aarch_decoder_table[117]=aarch64_mask_entry(0x0, NULL,67);
	aarch_decoder_table[108]=aarch64_mask_entry(0x0, NULL,21);
0x5c00
cur mask 0x5c00
branchNo 0
branchNo 15
branchNo 0
branchNo 0
branchNo 0
branchNo 7
branchNo 7
	aarch_decoder_table[109]=aarch64_mask_entry(0x5c00, map_list_of(0,118)(1,119)(2,120),-1);
[[114, 211, 212, 213], [220, 221], [117]]
	aarch_decoder_table[118]=aarch64_mask_entry(0x0, NULL,114);
0x807fa000
cur mask 0x807fa000
branchNo 0
branchNo 1
	aarch_decoder_table[119]=aarch64_mask_entry(0x807fa000, map_list_of(0,121)(1,122),-1);
[[220], [221]]
	aarch_decoder_table[121]=aarch64_mask_entry(0x0, NULL,220);
	aarch_decoder_table[122]=aarch64_mask_entry(0x0, NULL,221);
	aarch_decoder_table[120]=aarch64_mask_entry(0x0, NULL,117);
0x60000000
cur mask 0x60000000
branchNo 2
branchNo 2
branchNo 0
branchNo 0
branchNo 2
branchNo 2
branchNo 2
branchNo 1
branchNo 1
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 1
branchNo 1
branchNo 2
branchNo 2
branchNo 2
branchNo 2
	aarch_decoder_table[80]=aarch64_mask_entry(0x60000000, map_list_of(0,123)(1,124)(2,125),-1);
[[20, 26], [30, 31, 206, 207], [18, 19, 27, 28, 29, 38, 56, 57, 58, 59, 60, 61, 62, 66, 68, 69, 70, 71, 72, 129, 130, 131, 139, 148, 161, 162, 164, 200, 204, 205, 208, 222, 223, 224]]
0x80000000
cur mask 0x80000000
branchNo 0
branchNo 1
	aarch_decoder_table[123]=aarch64_mask_entry(0x80000000, map_list_of(0,126)(1,127),-1);
[[20], [26]]
	aarch_decoder_table[126]=aarch64_mask_entry(0x0, NULL,20);
	aarch_decoder_table[127]=aarch64_mask_entry(0x0, NULL,26);
0x3000000
cur mask 0x3000000
branchNo 1
branchNo 0
branchNo 3
branchNo 2
	aarch_decoder_table[124]=aarch64_mask_entry(0x3000000, map_list_of(0,128)(1,129)(2,130)(3,131),-1);
[[31], [30], [207], [206]]
	aarch_decoder_table[128]=aarch64_mask_entry(0x0, NULL,31);
	aarch_decoder_table[129]=aarch64_mask_entry(0x0, NULL,30);
	aarch_decoder_table[130]=aarch64_mask_entry(0x0, NULL,207);
	aarch_decoder_table[131]=aarch64_mask_entry(0x0, NULL,206);
0x83000000
cur mask 0x83000000
branchNo 5
branchNo 0
branchNo 6
branchNo 6
branchNo 4
branchNo 5
branchNo 5
branchNo 4
branchNo 4
branchNo 4
branchNo 5
branchNo 6
branchNo 5
branchNo 6
branchNo 5
branchNo 4
branchNo 4
branchNo 5
branchNo 5
branchNo 5
branchNo 5
branchNo 5
branchNo 5
branchNo 6
branchNo 5
branchNo 5
branchNo 4
branchNo 4
branchNo 5
branchNo 5
branchNo 5
branchNo 5
branchNo 5
branchNo 5
	aarch_decoder_table[125]=aarch64_mask_entry(0x83000000, map_list_of(0,132)(1,133)(2,134)(3,135),-1);
[[19], [29, 57, 58, 59, 69, 70, 164, 200], [18, 38, 56, 60, 62, 68, 71, 72, 129, 130, 131, 139, 161, 162, 204, 205, 208, 222, 223, 224], [27, 28, 61, 66, 148]]
	aarch_decoder_table[132]=aarch64_mask_entry(0x0, NULL,19);
0xe0001f
cur mask 0xe0001f
branchNo 32
branchNo 161
branchNo 162
branchNo 163
branchNo 64
branchNo 2
branchNo 3
branchNo 1
	aarch_decoder_table[133]=aarch64_mask_entry(0xe0001f, map_list_of(0,136)(1,137)(2,138)(3,139)(4,140)(5,141)(6,142)(7,143),-1);
[[200], [70], [164], [29], [69], [57], [58], [59]]
	aarch_decoder_table[136]=aarch64_mask_entry(0x0, NULL,200);
	aarch_decoder_table[137]=aarch64_mask_entry(0x0, NULL,70);
	aarch_decoder_table[138]=aarch64_mask_entry(0x0, NULL,164);
	aarch_decoder_table[139]=aarch64_mask_entry(0x0, NULL,29);
	aarch_decoder_table[140]=aarch64_mask_entry(0x0, NULL,69);
	aarch_decoder_table[141]=aarch64_mask_entry(0x0, NULL,57);
	aarch_decoder_table[142]=aarch64_mask_entry(0x0, NULL,58);
	aarch_decoder_table[143]=aarch64_mask_entry(0x0, NULL,59);
0xf00000
cur mask 0xf00000
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 3
branchNo 0
branchNo 1
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 2
branchNo 0
branchNo 0
branchNo 0
branchNo 0
	aarch_decoder_table[134]=aarch64_mask_entry(0xf00000, map_list_of(0,144)(1,145)(2,146)(3,147),-1);
[[18, 38, 56, 60, 62, 68, 71, 72, 130, 139, 161, 162, 204, 208, 222, 223, 224], [131], [205], [129]]
0x80000
cur mask 0x80000
branchNo 1
branchNo 0
branchNo 1
branchNo 0
branchNo 0
branchNo 0
branchNo 1
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 0
branchNo 1
branchNo 1
branchNo 0
branchNo 0
branchNo 0
	aarch_decoder_table[144]=aarch64_mask_entry(0x80000, map_list_of(0,148)(1,149),-1);
[[38, 60, 62, 68, 72, 130, 139, 161, 162, 222, 223, 224], [18, 56, 71, 204, 208]]
0xf01f
cur mask 0xf01f
branchNo 127
branchNo 127
branchNo 127
branchNo 95
branchNo 127
branchNo 159
branchNo 95
branchNo 95
branchNo 95
branchNo 95
branchNo 95
branchNo 95
	aarch_decoder_table[148]=aarch64_mask_entry(0xf01f, map_list_of(0,150)(1,151)(2,152),-1);
[[68, 139, 161, 162, 222, 223, 224], [38, 60, 62, 72], [130]]
0x70000
cur mask 0x70000
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
	aarch_decoder_table[150]=aarch64_mask_entry(0x70000, map_list_of(0,153),-1);
[[68, 139, 161, 162, 222, 223, 224]]
0x20
cur mask 0x20
branchNo 0
branchNo 0
branchNo 0
branchNo 1
branchNo 0
branchNo 1
branchNo 1
	aarch_decoder_table[153]=aarch64_mask_entry(0x20, map_list_of(0,154)(1,155),-1);
[[68, 139, 161, 222], [162, 223, 224]]
0xc0
cur mask 0xc0
branchNo 0
branchNo 0
branchNo 2
branchNo 1
	aarch_decoder_table[154]=aarch64_mask_entry(0xc0, map_list_of(0,156)(1,157)(2,158),-1);
[[68, 139], [222], [161]]
	aarch_decoder_table[156]=aarch64_mask_entry(0x0, NULL,68);
	aarch_decoder_table[157]=aarch64_mask_entry(0x0, NULL,222);
	aarch_decoder_table[158]=aarch64_mask_entry(0x0, NULL,161);
0xfc0
cur mask 0xfc0
branchNo 2
branchNo 1
branchNo 0
	aarch_decoder_table[155]=aarch64_mask_entry(0xfc0, map_list_of(0,159)(1,160)(2,161),-1);
[[224], [223], [162]]
	aarch_decoder_table[159]=aarch64_mask_entry(0x0, NULL,224);
	aarch_decoder_table[160]=aarch64_mask_entry(0x0, NULL,223);
	aarch_decoder_table[161]=aarch64_mask_entry(0x0, NULL,162);
0x700e0
cur mask 0x700e0
branchNo 26
branchNo 29
branchNo 28
branchNo 30
	aarch_decoder_table[151]=aarch64_mask_entry(0x700e0, map_list_of(0,162)(1,163)(2,164)(3,165),-1);
[[38], [62], [60], [72]]
	aarch_decoder_table[162]=aarch64_mask_entry(0x0, NULL,38);
	aarch_decoder_table[163]=aarch64_mask_entry(0x0, NULL,62);
	aarch_decoder_table[164]=aarch64_mask_entry(0x0, NULL,60);
	aarch_decoder_table[165]=aarch64_mask_entry(0x0, NULL,72);
	aarch_decoder_table[152]=aarch64_mask_entry(0x0, NULL,130);
0xf800
cur mask 0xf800
branchNo 15
branchNo 14
branchNo 14
branchNo 0
branchNo 16
	aarch_decoder_table[149]=aarch64_mask_entry(0xf800, map_list_of(0,166)(1,167)(2,168)(3,169),-1);
[[204], [56, 71], [18], [208]]
	aarch_decoder_table[166]=aarch64_mask_entry(0x0, NULL,204);
	aarch_decoder_table[167]=aarch64_mask_entry(0x0, NULL,56);
	aarch_decoder_table[168]=aarch64_mask_entry(0x0, NULL,18);
	aarch_decoder_table[169]=aarch64_mask_entry(0x0, NULL,208);
	aarch_decoder_table[145]=aarch64_mask_entry(0x0, NULL,131);
	aarch_decoder_table[146]=aarch64_mask_entry(0x0, NULL,205);
	aarch_decoder_table[147]=aarch64_mask_entry(0x0, NULL,129);
0xfffc1f
cur mask 0xfffc1f
branchNo 129024
branchNo 63488
branchNo 391168
branchNo 325632
branchNo 194560
	aarch_decoder_table[135]=aarch64_mask_entry(0xfffc1f, map_list_of(0,170)(1,171)(2,172)(3,173)(4,174),-1);
[[28], [27], [148], [66], [61]]
	aarch_decoder_table[170]=aarch64_mask_entry(0x0, NULL,28);
	aarch_decoder_table[171]=aarch64_mask_entry(0x0, NULL,27);
	aarch_decoder_table[172]=aarch64_mask_entry(0x0, NULL,148);
	aarch_decoder_table[173]=aarch64_mask_entry(0x0, NULL,66);
	aarch_decoder_table[174]=aarch64_mask_entry(0x0, NULL,61);
0x27000000
cur mask 0x27000000
branchNo 2
branchNo 10
branchNo 2
branchNo 2
branchNo 10
branchNo 10
branchNo 10
branchNo 10
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 8
branchNo 0
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 0
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 2
branchNo 10
branchNo 9
branchNo 0
branchNo 8
branchNo 8
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 10
branchNo 2
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 8
branchNo 2
branchNo 3
branchNo 3
branchNo 3
branchNo 3
branchNo 3
	aarch_decoder_table[4]=aarch64_mask_entry(0x27000000, map_list_of(0,175)(1,176)(2,177)(3,178)(4,179)(5,180),-1);
[[84, 95, 144], [1, 15, 17, 36, 37, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 113, 115, 116, 118, 137, 147, 149, 150, 151, 153, 154, 155, 160, 214], [119, 120, 132, 133, 163, 165, 166, 167, 168, 215, 216, 217, 218, 219], [83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 145, 146, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189], [143], [2, 32, 33, 34, 35, 138, 156]]
0x80000000
cur mask 0x80000000
branchNo 0
branchNo 1
branchNo 1
	aarch_decoder_table[175]=aarch64_mask_entry(0x80000000, map_list_of(0,181)(1,182),-1);
[[84], [95, 144]]
	aarch_decoder_table[181]=aarch64_mask_entry(0x0, NULL,84);
0x40000000
cur mask 0x40000000
branchNo 0
branchNo 1
	aarch_decoder_table[182]=aarch64_mask_entry(0x40000000, map_list_of(0,183)(1,184),-1);
[[95], [144]]
	aarch_decoder_table[183]=aarch64_mask_entry(0x0, NULL,95);
	aarch_decoder_table[184]=aarch64_mask_entry(0x0, NULL,144);
0x40e00000
cur mask 0x40e00000
branchNo 0
branchNo 6
branchNo 6
branchNo 4
branchNo 12
branchNo 14
branchNo 14
branchNo 12
branchNo 6
branchNo 6
branchNo 4
branchNo 4
branchNo 12
branchNo 4
branchNo 12
branchNo 12
branchNo 6
branchNo 6
branchNo 6
branchNo 6
branchNo 8
branchNo 14
branchNo 14
branchNo 14
branchNo 14
branchNo 6
branchNo 6
branchNo 8
branchNo 6
branchNo 6
	aarch_decoder_table[176]=aarch64_mask_entry(0x40e00000, map_list_of(0,185)(1,186)(2,187)(3,188)(4,189)(5,190),-1);
[[1], [36, 50, 51, 53], [15, 17, 48, 49, 113, 115, 116, 118, 153, 154, 160, 214], [137, 155], [37, 47, 52, 54, 55], [39, 40, 147, 149, 150, 151]]
	aarch_decoder_table[185]=aarch64_mask_entry(0x0, NULL,1);
0xc00
cur mask 0xc00
branchNo 1
branchNo 0
branchNo 1
branchNo 1
	aarch_decoder_table[186]=aarch64_mask_entry(0xc00, map_list_of(0,191)(1,192),-1);
[[50], [36, 51, 53]]
	aarch_decoder_table[191]=aarch64_mask_entry(0x0, NULL,50);
0x1f03e0
cur mask 0x1f03e0
branchNo 0
branchNo 1023
branchNo 0
	aarch_decoder_table[192]=aarch64_mask_entry(0x1f03e0, map_list_of(0,193)(1,194),-1);
[[36, 53], [51]]
	aarch_decoder_table[193]=aarch64_mask_entry(0x0, NULL,36);
	aarch_decoder_table[194]=aarch64_mask_entry(0x0, NULL,51);
0xf000
cur mask 0xf000
branchNo 2
branchNo 2
branchNo 4
branchNo 5
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 2
branchNo 0
branchNo 0
	aarch_decoder_table[187]=aarch64_mask_entry(0xf000, map_list_of(0,195)(1,196)(2,197)(3,198),-1);
[[160, 214], [15, 17, 113, 115, 116, 118, 153, 154], [48], [49]]
0xc00
cur mask 0xc00
branchNo 3
branchNo 2
	aarch_decoder_table[195]=aarch64_mask_entry(0xc00, map_list_of(0,199)(1,200),-1);
[[214], [160]]
	aarch_decoder_table[199]=aarch64_mask_entry(0x0, NULL,214);
	aarch_decoder_table[200]=aarch64_mask_entry(0x0, NULL,160);
0xc00
cur mask 0xc00
branchNo 2
branchNo 2
branchNo 0
branchNo 0
branchNo 1
branchNo 1
branchNo 3
branchNo 3
	aarch_decoder_table[196]=aarch64_mask_entry(0xc00, map_list_of(0,201)(1,202)(2,203)(3,204),-1);
[[113, 115], [116, 118], [15, 17], [153, 154]]
	aarch_decoder_table[201]=aarch64_mask_entry(0x0, NULL,113);
	aarch_decoder_table[202]=aarch64_mask_entry(0x0, NULL,116);
	aarch_decoder_table[203]=aarch64_mask_entry(0x0, NULL,15);
	aarch_decoder_table[204]=aarch64_mask_entry(0x0, NULL,153);
	aarch_decoder_table[197]=aarch64_mask_entry(0x0, NULL,48);
	aarch_decoder_table[198]=aarch64_mask_entry(0x0, NULL,49);
0xfc00
cur mask 0xfc00
branchNo 0
branchNo 0
	aarch_decoder_table[188]=aarch64_mask_entry(0xfc00, map_list_of(0,205),-1);
[[137, 155]]
0x3e0
cur mask 0x3e0
branchNo 31
branchNo 0
	aarch_decoder_table[205]=aarch64_mask_entry(0x3e0, map_list_of(0,206)(1,207),-1);
[[155], [137]]
	aarch_decoder_table[206]=aarch64_mask_entry(0x0, NULL,155);
	aarch_decoder_table[207]=aarch64_mask_entry(0x0, NULL,137);
0xc00
cur mask 0xc00
branchNo 0
branchNo 1
branchNo 0
branchNo 0
branchNo 1
	aarch_decoder_table[189]=aarch64_mask_entry(0xc00, map_list_of(0,208)(1,209),-1);
[[37, 52, 54], [47, 55]]
0x1f03e0
cur mask 0x1f03e0
branchNo 0
branchNo 1023
branchNo 0
	aarch_decoder_table[208]=aarch64_mask_entry(0x1f03e0, map_list_of(0,210)(1,211),-1);
[[37, 54], [52]]
	aarch_decoder_table[210]=aarch64_mask_entry(0x0, NULL,37);
	aarch_decoder_table[211]=aarch64_mask_entry(0x0, NULL,52);
	aarch_decoder_table[209]=aarch64_mask_entry(0x0, NULL,47);
0x1ff800
cur mask 0x1ff800
branchNo 2
branchNo 2
branchNo 0
branchNo 1
branchNo 0
branchNo 1
	aarch_decoder_table[190]=aarch64_mask_entry(0x1ff800, map_list_of(0,212)(1,213)(2,214),-1);
[[147, 150], [149, 151], [39, 40]]
0x400
cur mask 0x400
branchNo 0
branchNo 1
	aarch_decoder_table[212]=aarch64_mask_entry(0x400, map_list_of(0,215)(1,216),-1);
[[147], [150]]
	aarch_decoder_table[215]=aarch64_mask_entry(0x0, NULL,147);
	aarch_decoder_table[216]=aarch64_mask_entry(0x0, NULL,150);
0x80000000
cur mask 0x80000000
branchNo 0
branchNo 1
	aarch_decoder_table[213]=aarch64_mask_entry(0x80000000, map_list_of(0,217)(1,218),-1);
[[149], [151]]
	aarch_decoder_table[217]=aarch64_mask_entry(0x0, NULL,149);
	aarch_decoder_table[218]=aarch64_mask_entry(0x0, NULL,151);
0x400
cur mask 0x400
branchNo 1
branchNo 0
	aarch_decoder_table[214]=aarch64_mask_entry(0x400, map_list_of(0,219)(1,220),-1);
[[40], [39]]
	aarch_decoder_table[219]=aarch64_mask_entry(0x0, NULL,40);
	aarch_decoder_table[220]=aarch64_mask_entry(0x0, NULL,39);
0x40e08000
cur mask 0x40e08000
branchNo 0
branchNo 1
branchNo 1
branchNo 0
branchNo 2
branchNo 3
branchNo 3
branchNo 4
branchNo 2
branchNo 10
branchNo 11
branchNo 11
branchNo 12
branchNo 10
	aarch_decoder_table[177]=aarch64_mask_entry(0x40e08000, map_list_of(0,221)(1,222)(2,223)(3,224)(4,225)(5,226)(6,227)(7,228),-1);
[[119, 133], [120, 132], [163, 168], [165, 166], [167], [215, 219], [216, 217], [218]]
0x7c00
cur mask 0x7c00
branchNo 0
branchNo 31
	aarch_decoder_table[221]=aarch64_mask_entry(0x7c00, map_list_of(0,229)(1,230),-1);
[[119], [133]]
	aarch_decoder_table[229]=aarch64_mask_entry(0x0, NULL,119);
	aarch_decoder_table[230]=aarch64_mask_entry(0x0, NULL,133);
0x7c00
cur mask 0x7c00
branchNo 31
branchNo 0
	aarch_decoder_table[222]=aarch64_mask_entry(0x7c00, map_list_of(0,231)(1,232),-1);
[[132], [120]]
	aarch_decoder_table[231]=aarch64_mask_entry(0x0, NULL,132);
	aarch_decoder_table[232]=aarch64_mask_entry(0x0, NULL,120);
0x80000000
cur mask 0x80000000
branchNo 1
branchNo 1
	aarch_decoder_table[223]=aarch64_mask_entry(0x80000000, map_list_of(0,233),-1);
[[163, 168]]
0x7c00
cur mask 0x7c00
branchNo 0
branchNo 31
	aarch_decoder_table[233]=aarch64_mask_entry(0x7c00, map_list_of(0,234)(1,235),-1);
[[163], [168]]
	aarch_decoder_table[234]=aarch64_mask_entry(0x0, NULL,163);
	aarch_decoder_table[235]=aarch64_mask_entry(0x0, NULL,168);
0x80000000
cur mask 0x80000000
branchNo 1
branchNo 1
	aarch_decoder_table[224]=aarch64_mask_entry(0x80000000, map_list_of(0,236),-1);
[[165, 166]]
0x7c00
cur mask 0x7c00
branchNo 31
branchNo 0
	aarch_decoder_table[236]=aarch64_mask_entry(0x7c00, map_list_of(0,237)(1,238),-1);
[[166], [165]]
	aarch_decoder_table[237]=aarch64_mask_entry(0x0, NULL,166);
	aarch_decoder_table[238]=aarch64_mask_entry(0x0, NULL,165);
	aarch_decoder_table[225]=aarch64_mask_entry(0x0, NULL,167);
0x80000000
cur mask 0x80000000
branchNo 1
branchNo 1
	aarch_decoder_table[226]=aarch64_mask_entry(0x80000000, map_list_of(0,239),-1);
[[215, 219]]
0x7c00
cur mask 0x7c00
branchNo 0
branchNo 31
	aarch_decoder_table[239]=aarch64_mask_entry(0x7c00, map_list_of(0,240)(1,241),-1);
[[215], [219]]
	aarch_decoder_table[240]=aarch64_mask_entry(0x0, NULL,215);
	aarch_decoder_table[241]=aarch64_mask_entry(0x0, NULL,219);
0x80000000
cur mask 0x80000000
branchNo 1
branchNo 1
	aarch_decoder_table[227]=aarch64_mask_entry(0x80000000, map_list_of(0,242),-1);
[[216, 217]]
0x7c00
cur mask 0x7c00
branchNo 31
branchNo 0
	aarch_decoder_table[242]=aarch64_mask_entry(0x7c00, map_list_of(0,243)(1,244),-1);
[[217], [216]]
	aarch_decoder_table[243]=aarch64_mask_entry(0x0, NULL,217);
	aarch_decoder_table[244]=aarch64_mask_entry(0x0, NULL,216);
	aarch_decoder_table[228]=aarch64_mask_entry(0x0, NULL,218);
0x80a00c00
cur mask 0x80a00c00
branchNo 17
branchNo 22
branchNo 1
branchNo 6
branchNo 1
branchNo 6
branchNo 9
branchNo 14
branchNo 9
branchNo 14
branchNo 25
branchNo 30
branchNo 18
branchNo 2
branchNo 2
branchNo 10
branchNo 10
branchNo 26
branchNo 16
branchNo 0
branchNo 0
branchNo 8
branchNo 8
branchNo 24
branchNo 30
branchNo 24
branchNo 17
branchNo 22
branchNo 1
branchNo 6
branchNo 1
branchNo 6
branchNo 18
branchNo 2
branchNo 2
branchNo 16
branchNo 0
branchNo 0
	aarch_decoder_table[178]=aarch64_mask_entry(0x80a00c00, map_list_of(0,245)(1,246)(2,247)(3,248)(4,249)(5,250)(6,251)(7,252)(8,253)(9,254)(10,255)(11,256)(12,257)(13,258)(14,259)(15,260),-1);
[[104, 105, 188, 189], [86, 88, 180, 182], [98, 99, 185, 186], [87, 89, 181, 183], [106, 107], [90, 92], [100, 101], [91, 93], [103, 187], [83, 178], [97, 184], [85, 179], [108, 146], [94], [102], [96, 145]]
0x40400000
cur mask 0x40400000
branchNo 1
branchNo 3
branchNo 0
branchNo 2
	aarch_decoder_table[245]=aarch64_mask_entry(0x40400000, map_list_of(0,261)(1,262)(2,263)(3,264),-1);
[[188], [104], [189], [105]]
	aarch_decoder_table[261]=aarch64_mask_entry(0x0, NULL,188);
	aarch_decoder_table[262]=aarch64_mask_entry(0x0, NULL,104);
	aarch_decoder_table[263]=aarch64_mask_entry(0x0, NULL,189);
	aarch_decoder_table[264]=aarch64_mask_entry(0x0, NULL,105);
0x40400000
cur mask 0x40400000
branchNo 1
branchNo 3
branchNo 0
branchNo 2
	aarch_decoder_table[246]=aarch64_mask_entry(0x40400000, map_list_of(0,265)(1,266)(2,267)(3,268),-1);
[[180], [86], [182], [88]]
	aarch_decoder_table[265]=aarch64_mask_entry(0x0, NULL,180);
	aarch_decoder_table[266]=aarch64_mask_entry(0x0, NULL,86);
	aarch_decoder_table[267]=aarch64_mask_entry(0x0, NULL,182);
	aarch_decoder_table[268]=aarch64_mask_entry(0x0, NULL,88);
0x40400000
cur mask 0x40400000
branchNo 1
branchNo 3
branchNo 0
branchNo 2
	aarch_decoder_table[247]=aarch64_mask_entry(0x40400000, map_list_of(0,269)(1,270)(2,271)(3,272),-1);
[[185], [98], [186], [99]]
	aarch_decoder_table[269]=aarch64_mask_entry(0x0, NULL,185);
	aarch_decoder_table[270]=aarch64_mask_entry(0x0, NULL,98);
	aarch_decoder_table[271]=aarch64_mask_entry(0x0, NULL,186);
	aarch_decoder_table[272]=aarch64_mask_entry(0x0, NULL,99);
0x40400000
cur mask 0x40400000
branchNo 1
branchNo 3
branchNo 0
branchNo 2
	aarch_decoder_table[248]=aarch64_mask_entry(0x40400000, map_list_of(0,273)(1,274)(2,275)(3,276),-1);
[[181], [87], [183], [89]]
	aarch_decoder_table[273]=aarch64_mask_entry(0x0, NULL,181);
	aarch_decoder_table[274]=aarch64_mask_entry(0x0, NULL,87);
	aarch_decoder_table[275]=aarch64_mask_entry(0x0, NULL,183);
	aarch_decoder_table[276]=aarch64_mask_entry(0x0, NULL,89);
0x40000000
cur mask 0x40000000
branchNo 0
branchNo 1
	aarch_decoder_table[249]=aarch64_mask_entry(0x40000000, map_list_of(0,277)(1,278),-1);
[[106], [107]]
	aarch_decoder_table[277]=aarch64_mask_entry(0x0, NULL,106);
	aarch_decoder_table[278]=aarch64_mask_entry(0x0, NULL,107);
0x40000000
cur mask 0x40000000
branchNo 0
branchNo 1
	aarch_decoder_table[250]=aarch64_mask_entry(0x40000000, map_list_of(0,279)(1,280),-1);
[[90], [92]]
	aarch_decoder_table[279]=aarch64_mask_entry(0x0, NULL,90);
	aarch_decoder_table[280]=aarch64_mask_entry(0x0, NULL,92);
0x40000000
cur mask 0x40000000
branchNo 0
branchNo 1
	aarch_decoder_table[251]=aarch64_mask_entry(0x40000000, map_list_of(0,281)(1,282),-1);
[[100], [101]]
	aarch_decoder_table[281]=aarch64_mask_entry(0x0, NULL,100);
	aarch_decoder_table[282]=aarch64_mask_entry(0x0, NULL,101);
0x40000000
cur mask 0x40000000
branchNo 0
branchNo 1
	aarch_decoder_table[252]=aarch64_mask_entry(0x40000000, map_list_of(0,283)(1,284),-1);
[[91], [93]]
	aarch_decoder_table[283]=aarch64_mask_entry(0x0, NULL,91);
	aarch_decoder_table[284]=aarch64_mask_entry(0x0, NULL,93);
0x400000
cur mask 0x400000
branchNo 1
branchNo 0
	aarch_decoder_table[253]=aarch64_mask_entry(0x400000, map_list_of(0,285)(1,286),-1);
[[187], [103]]
	aarch_decoder_table[285]=aarch64_mask_entry(0x0, NULL,187);
	aarch_decoder_table[286]=aarch64_mask_entry(0x0, NULL,103);
0x400000
cur mask 0x400000
branchNo 1
branchNo 0
	aarch_decoder_table[254]=aarch64_mask_entry(0x400000, map_list_of(0,287)(1,288),-1);
[[178], [83]]
	aarch_decoder_table[287]=aarch64_mask_entry(0x0, NULL,178);
	aarch_decoder_table[288]=aarch64_mask_entry(0x0, NULL,83);
0x400000
cur mask 0x400000
branchNo 1
branchNo 0
	aarch_decoder_table[255]=aarch64_mask_entry(0x400000, map_list_of(0,289)(1,290),-1);
[[184], [97]]
	aarch_decoder_table[289]=aarch64_mask_entry(0x0, NULL,184);
	aarch_decoder_table[290]=aarch64_mask_entry(0x0, NULL,97);
0x400000
cur mask 0x400000
branchNo 1
branchNo 0
	aarch_decoder_table[256]=aarch64_mask_entry(0x400000, map_list_of(0,291)(1,292),-1);
[[179], [85]]
	aarch_decoder_table[291]=aarch64_mask_entry(0x0, NULL,179);
	aarch_decoder_table[292]=aarch64_mask_entry(0x0, NULL,85);
0x40400000
cur mask 0x40400000
branchNo 0
branchNo 2
	aarch_decoder_table[257]=aarch64_mask_entry(0x40400000, map_list_of(0,293)(1,294),-1);
[[108], [146]]
	aarch_decoder_table[293]=aarch64_mask_entry(0x0, NULL,108);
	aarch_decoder_table[294]=aarch64_mask_entry(0x0, NULL,146);
	aarch_decoder_table[258]=aarch64_mask_entry(0x0, NULL,94);
	aarch_decoder_table[259]=aarch64_mask_entry(0x0, NULL,102);
0x40400000
cur mask 0x40400000
branchNo 0
branchNo 2
	aarch_decoder_table[260]=aarch64_mask_entry(0x40400000, map_list_of(0,295)(1,296),-1);
[[96], [145]]
	aarch_decoder_table[295]=aarch64_mask_entry(0x0, NULL,96);
	aarch_decoder_table[296]=aarch64_mask_entry(0x0, NULL,145);
	aarch_decoder_table[179]=aarch64_mask_entry(0x0, NULL,143);
0x40e00c00
cur mask 0x40e00c00
branchNo 0
branchNo 10
branchNo 8
branchNo 42
branchNo 40
branchNo 32
branchNo 32
	aarch_decoder_table[180]=aarch64_mask_entry(0x40e00c00, map_list_of(0,297)(1,298)(2,299)(3,300)(4,301)(5,302),-1);
[[2], [33], [32], [138, 156], [35], [34]]
	aarch_decoder_table[297]=aarch64_mask_entry(0x0, NULL,2);
	aarch_decoder_table[298]=aarch64_mask_entry(0x0, NULL,33);
	aarch_decoder_table[299]=aarch64_mask_entry(0x0, NULL,32);
0xf000
cur mask 0xf000
branchNo 0
branchNo 0
	aarch_decoder_table[300]=aarch64_mask_entry(0xf000, map_list_of(0,303),-1);
[[138, 156]]
0x3e0
cur mask 0x3e0
branchNo 31
branchNo 0
	aarch_decoder_table[303]=aarch64_mask_entry(0x3e0, map_list_of(0,304)(1,305),-1);
[[156], [138]]
	aarch_decoder_table[304]=aarch64_mask_entry(0x0, NULL,156);
	aarch_decoder_table[305]=aarch64_mask_entry(0x0, NULL,138);
	aarch_decoder_table[301]=aarch64_mask_entry(0x0, NULL,35);
	aarch_decoder_table[302]=aarch64_mask_entry(0x0, NULL,34);
num of vaild leaves 225
processed indexex:  Set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224]) 225
missing indexes: [] 0
number of total nodes in the tree: 306
